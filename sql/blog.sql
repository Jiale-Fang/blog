/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50732
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50732
File Encoding         : 65001

Date: 2021-05-30 21:50:48
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `blog_id` bigint(20) NOT NULL COMMENT '博客id',
  `title` varchar(100) NOT NULL COMMENT '标题',
  `uid` bigint(20) NOT NULL,
  `content` longtext COMMENT '内容',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `first_picture` varchar(255) NOT NULL DEFAULT 'https://unsplash.it/800/450?image=271' COMMENT '首图',
  `flag` varchar(255) DEFAULT NULL COMMENT '完成状态',
  `thumbs` int(10) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `published` tinyint(1) NOT NULL COMMENT '发布状态',
  `recommend` tinyint(1) NOT NULL COMMENT '推荐状态',
  `share_statement` varchar(10) NOT NULL COMMENT '版权状态',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `views` int(10) DEFAULT '0' COMMENT '浏览次数',
  `type_id` bigint(20) NOT NULL,
  `description` longtext NOT NULL,
  `appreciation` tinyint(1) NOT NULL COMMENT '赞赏状态',
  `commentabled` tinyint(1) DEFAULT NULL COMMENT '评论状态',
  PRIMARY KEY (`blog_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('1354971607569526785', '这是一篇测试文章1', '1354330782506385410', '#### 使用 markdown 编辑器来开始书写你的博客吧！', '2021-02-01 11:11:12', 'https://unsplash.it/800/450?image=1021', '发布', '0', '0', '1', '原创', null, '12', '1', '这只是一个用来测试的描述而已', '0', '1');
INSERT INTO `blog` VALUES ('1354977782910414850', 'Jsoup+vue+springboot+elasticSearch实现的简单的仿京东页面', '1354747628447477762', '&ensp;页面展示如下↓\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210121194516152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n本demo采用前后端分离服务器的方式完成，首先先从后端开始。\n\n@[TOC]( )\n\n## 1、后端开发\n### 1.1 如何爬取到京东的数据？\n\n&ensp;我们使用的是jsoup来解析浏览器的数据，在爬取数据之前，我们要先明白，我们需要的数据是什么，因此让我们来看看京东的商品搜索页面。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210121200720531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&ensp;初步看，如果要完成爬取数据到我们的页面上，至少需要获取到商品的标题，图片以及价格，因此F12查看一下网页源码。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210121201158477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&ensp;易知，在J_goodsList标签下，一个个li标签中就有我们想要获取的数据，因此我们可以开始编写后端代码。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210121201744799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### 1.2 相关依赖的导入\n&ensp;在pom文件引入jsoup和springboot、elasticSearch的依赖\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.4.2</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>pers.fjl</groupId>\n    <artifactId>es-jd</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>es-jd</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <!--		自定义es版本依赖否则会出bug-->\n        <elasticsearch.version>7.6.1</elasticsearch.version>\n    </properties>\n    <dependencies>\n<!--        解析网页-->\n        <dependency>\n            <groupId>org.jsoup</groupId>\n            <artifactId>jsoup</artifactId>\n            <version>1.10.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.56</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n### 1.3 Jsoup工具类的编写\n&ensp;把获取的数据字段封装到Content实体类，加入到list中后返回。\n```java\npackage pers.fjl.utils;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\nimport pers.fjl.po.Content;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HtmlParseUtil {\n    public static void main(String[] args) throws IOException{\n        new HtmlParseUtil().parseJD(\"java\").forEach(System.out::println);\n    }\n\n    public List<Content> parseJD(String keyword) throws IOException {\n        // 获取请求 https://search.jd.com/Search?keyword=java\n        String url = \"https://search.jd.com/Search?keyword=\" + keyword + \"&enc=utf-8\";\n        // 解析网页,返回浏览器document页面对象\n        Document document = Jsoup.parse(new URL(url), 30000);\n        // 所有js能用的方法在这都可使用\n        Element element = document.getElementById(\"J_goodsList\");   // 获取div标签J_goodsList\n        System.out.println(element.html());\n        // 数据都在li标签中\n        Elements lis = element.getElementsByTag(\"li\");\n\n        ArrayList<Content> goodsList = new ArrayList<>();\n\n        for (Element el : lis) {\n            // 网页采用了懒加载，所以在src中无法直接获取\n            String img = el.getElementsByTag(\"img\").eq(0).attr(\"data-lazy-img\");\n            String price = el.getElementsByClass(\"p-price\").eq(0).text();\n            String title = el.getElementsByClass(\"p-name\").eq(0).text();\n\n            Content content = new Content();\n            content.setImg(img);\n            content.setPrice(price);\n            content.setTitle(title);\n            goodsList.add(content);\n        }\n\n        return goodsList;\n    }\n}\n\n```\n### 1.4 将返回的list加入到elasticSearch中\n返回的list可以选择放入到数据库或者elasticSearch中，这里展示后者。\n\n```java\n@Service\npublic class ContentService {\n    @Resource\n    private RestHighLevelClient restHighLevelClient;\n\n    // 1、解析数据放入es索引中\n    public Boolean parseContent(String keyword) throws Exception {\n        List<Content> contents = new HtmlParseUtil().parseJD(keyword);\n        // 把查询的数据放入到es中\n        BulkRequest bulkRequest = new BulkRequest();\n        bulkRequest.timeout(\"2m\");  // 超市时间2min\n\n        for (int i = 0; i < contents.size(); i++) {\n            // 批量添加\n            bulkRequest.add(new IndexRequest(ESconst.ES_INDEX)  // 存到jd_goods索引中\n                    .source(JSON.toJSONString(contents.get(i)), XContentType.JSON));\n        }\n\n        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);\n        return !bulk.hasFailures();\n    }\n}\n```\n&ensp;controller层简单的两个方法，\n\n```java\npackage pers.fjl.controller;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\nimport pers.fjl.service.ContentService;\n\nimport javax.annotation.Resource;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n@CrossOrigin\n@RestController\npublic class ContentController {\n    @Resource\n    private ContentService contentService;\n\n    @GetMapping(\"/parse/{keyword}\")\n    public Boolean parse(@PathVariable(\"keyword\") String keyword) throws Exception {\n        return contentService.parseContent(keyword);\n    }\n\n    @GetMapping(\"/search/{keyword}/{currentPage}/{pageSize}\")\n    public List<Map<String, Object>> search(@PathVariable(\"keyword\") String keyword,\n                                            @PathVariable(\"currentPage\") int currentPage,\n                                            @PathVariable(\"pageSize\") int pageSize) throws IOException {\n        return contentService.highLightSearchPage(keyword, currentPage, pageSize);\n    }\n\n}\n\n```\n&ensp;请求对应路径调用控制层方法\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210121204009511.png)\n&ensp;此处可看到，数据已经添加到es索引中。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021012120420368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### 1.5 将es中的数据返回到前端\n&ensp;其实只需要把需要的数据从mysql中或者es索引中拿出并封装到list返回即可。\n```java\npackage pers.fjl.service;\n\nimport com.alibaba.fastjson.JSON;\nimport org.elasticsearch.action.bulk.BulkRequest;\nimport org.elasticsearch.action.bulk.BulkResponse;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.text.Text;\nimport org.elasticsearch.common.unit.TimeValue;\nimport org.elasticsearch.common.xcontent.XContentType;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.index.query.TermQueryBuilder;\nimport org.elasticsearch.search.SearchHit;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightField;\nimport org.springframework.stereotype.Service;\nimport pers.fjl.po.Content;\nimport pers.fjl.utils.ESconst;\nimport pers.fjl.utils.HtmlParseUtil;\nimport javax.annotation.Resource;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class ContentService {\n    @Resource\n    private RestHighLevelClient restHighLevelClient;\n\n    // 3、获取这些数据实现搜索高亮功能\n    public List<Map<String, Object>> highLightSearchPage(String keyword, int currentPage, int pageSize) throws IOException {\n        if (currentPage <= 1) {\n            currentPage = 1;\n        }\n\n        // 条件搜索\n        SearchRequest searchRequest = new SearchRequest(\"jd_goods\");\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n\n        // 分页\n        // 从第几条数据开始\n        sourceBuilder.from((currentPage - 1) * pageSize);\n        sourceBuilder.size(pageSize);\n\n        // 精准匹配\n        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(\"title\", keyword);\n        sourceBuilder.query(termQueryBuilder);\n        sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));\n\n        // 高亮\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\n        highlightBuilder.field(\"title\");\n        highlightBuilder.requireFieldMatch(false); // 只高亮显示第一个即可\n        highlightBuilder.preTags(\"<span style = \'color:red\'>\");\n        highlightBuilder.postTags(\"</span>\");\n        sourceBuilder.highlighter(highlightBuilder);\n\n        // 执行搜素\n        searchRequest.source(sourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\n        // 解析结果\n        ArrayList<Map<String, Object>> list = new ArrayList<>();\n        for (SearchHit hit : searchResponse.getHits().getHits()) {  //hits中的字段没有被高亮，因此要将es返回highlight中的高亮字段替换到hit中\n            // 解析高亮字段\n            Map<String, HighlightField> highlightFields = hit.getHighlightFields();\n            HighlightField title = highlightFields.get(\"title\");\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap(); // 原来的字段结果\n            if (title != null) {   // 解析高亮字段，将原来字段替换为高亮字段\n                Text[] fragments = title.fragments();\n\n                String n_title = \"\";\n                for (Text text : fragments) {\n                    n_title += text;\n                }\n                sourceAsMap.put(\"title\", n_title); //高亮字段替换掉原来内容\n            }\n            sourceAsMap.put(\"id\",hit.getId());\n            list.add(hit.getSourceAsMap());\n        }\n        return list;\n    }\n}\n\n```\n\n## 2、前端开发\n### 2.1 页面的编写\n&ensp;前端代码写的比较简洁，不难看懂，在此不做赘述。\n\nmain.js\n```javascript\nimport Vue from \'vue\'\nimport App from \'./App.vue\'\nimport router from \'./router\'\nimport axios from \'axios\'\n// 导入全局样式表\nimport \'./assets/css/global.css\'\nimport ElementUI from \'element-ui\'\nimport \'element-ui/lib/theme-chalk/index.css\'\n\nVue.use(ElementUI)\n\nVue.config.productionTip = false\nVue.prototype.$http = axios\n// 配置请求的跟路径\naxios.defaults.baseURL = \'http://127.0.0.1:9090/\'\n\nnew Vue({\n  router,\n  el: \'#app\',\n  render: h => h(App)\n}).$mount(\'#app\')\n\n```\n商品详情页的vue\n```javascript\n<template>\n  <div>\n        <div id=\"mallPage\" class=\" mallist tmall- page-not-market \">\n\n          <!-- 头部搜索 -->\n          <div id=\"header\" class=\" header-list-app\">\n            <div class=\"headerLayout\">\n              <div class=\"headerCon \">\n                <!-- Logo-->\n                <h1 id=\"mallLogo\">\n                  <img src=\"../assets/images/jdlogo.png\" alt=\"\">\n                </h1>\n\n                <div class=\"header-extra\">\n\n                  <!--搜索-->\n                  <div id=\"mallSearch\" class=\"mall-search\">\n                    <form name=\"searchTop\" class=\"mallSearch-form clearfix\">\n                      <fieldset>\n                        <legend>天猫搜索</legend>\n                        <div class=\"mallSearch-input clearfix\">\n                          <div class=\"s-combobox\" id=\"s-combobox-685\">\n                            <div class=\"s-combobox-input-wrap\">\n                              <input v-model=\"pagination.keyword\" type=\"text\" autocomplete=\"off\" value=\"dd\" id=\"mq\"\n                                     class=\"s-combobox-input\" aria-haspopup=\"true\">\n                            </div>\n                          </div>\n                          <button type=\"submit\" @click=\"searchItem\" id=\"searchbtn\">搜索</button>\n                        </div>\n                      </fieldset>\n                    </form>\n                    <ul class=\"relKeyTop\">\n                      <li><a>Java</a></li>\n                      <li><a>前端</a></li>\n                      <li><a>Linux</a></li>\n                      <li><a>大数据</a></li>\n                      <li><a>理财</a></li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- 商品详情页面 -->\n          <div id=\"content\">\n            <div class=\"main\">\n              <!-- 品牌分类 -->\n              <form class=\"navAttrsForm\">\n                <div class=\"attrs j_NavAttrs\" style=\"display:block\">\n                  <div class=\"brandAttr j_nav_brand\">\n                    <div class=\"j_Brand attr\">\n                      <div class=\"attrKey\">\n                        品牌\n                      </div>\n                      <div class=\"attrValues\">\n                        <ul class=\"av-collapse row-2\">\n                          <li><a href=\"#\"> vue </a></li>\n                          <li><a href=\"#\"> Java </a></li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </form>\n\n              <!-- 排序规则 -->\n              <div class=\"filter clearfix\">\n                <a class=\"fSort fSort-cur\">综合<i class=\"f-ico-arrow-d\"></i></a>\n                <a class=\"fSort\">人气<i class=\"f-ico-arrow-d\"></i></a>\n                <a class=\"fSort\">新品<i class=\"f-ico-arrow-d\"></i></a>\n                <a class=\"fSort\">销量<i class=\"f-ico-arrow-d\"></i></a>\n                <a class=\"fSort\">价格<i class=\"f-ico-triangle-mt\"></i><i class=\"f-ico-triangle-mb\"></i></a>\n              </div>\n\n              <!-- 商品详情 -->\n              <div class=\"view grid-nosku\">\n\n                <div class=\"product\" v-for=\"result in results\" v-bind:key=\"result.id\">\n                  <div class=\"product-iWrap\">\n                    <!--商品封面-->\n                    <div class=\"productImg-wrap\">\n                      <a class=\"productImg\">\n                        <img v-bind:src = \"result.img\">\n                      </a>\n                    </div>\n                    <!--价格-->\n                    <p class=\"productPrice\">\n                      <em><b>¥</b>{{result.price}}</em>\n                    </p>\n                    <!--标题-->\n                    <p class=\"productTitle\">\n                      <a v-html=\"result.title\"></a>\n                    </p>\n                    <!-- 店铺名 -->\n                    <div class=\"productShop\">\n                      <span>店铺： Java </span>\n                    </div>\n                    <!-- 成交信息 -->\n                    <p class=\"productStatus\">\n                      <span>月成交<em>999笔</em></span>\n                      <span>评价 <a>3</a></span>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n\n          </div>\n        </div>\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <!-- 搜索与添加区域 -->\n      <el-pagination align=\"center\"\n        class=\"pagination\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :current-page=\"pagination.currentPage\"\n        :page-sizes=\"[2,5,10,15]\"\n        :page-size=\"pagination.pageSize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"100\">\n      </el-pagination>\n    </el-card>\n  </div>\n</template>\n\n<script>\n// import \'../assets/js/jquery.min\'\nexport default {\n  data () {\n    return {\n      test: 1,\n      pagination: { // 分页相关模型数据\n        currentPage: 1, // 当前页码\n        pageSize: 10, // 每页显示的记录数\n        total: 50, // 总记录数\n        keyword: null // 查询条件\n      },\n      results: [] // 搜索结果\n    }\n  },\n  methods: {\n    // 监听 switch 开关状态的改变\n    async searchItem () {\n      const keyword = this.pagination.keyword\n      const pageSize = this.pagination.pageSize\n      const currentPage = this.pagination.currentPage\n      const { data: res } = await this.$http.get(\n        `/search/${keyword}/${currentPage}/${pageSize}`\n      )\n      console.log(res)\n      this.results = res\n    },\n    // 切换页码\n    handleCurrentChange (currentPage) {\n      // 设置最新的页码\n      this.pagination.currentPage = currentPage\n      // 重新调用分页方法进行分页查询\n      this.searchItem()\n    },\n    handleSizeChange (newSize) {\n      this.pagination.pageSize = newSize\n      this.searchItem()\n    }\n  }\n}\n</script>\n\n<style>\n  /*@import \"../assets/css/style.css\";*/\n</style>\n\n```\n', '2021-01-15 19:44:40', 'https://unsplash.it/800/450?image=292', '草稿', '1', '0', '1', '原创', null, '124', '1', '爬取狗东数据，从入门到入狱？Jsoup+vue+springboot+elasticSearch实现的简单的仿京东页面，快进来看看吧！', '1', '1');
INSERT INTO `blog` VALUES ('1355150991559442433', '个人项目：SimHash实现的论文查重', '1354747628447477762', '# 个人项目：论文查重\n这个作业要求在哪里     | https://edu.cnblogs.com/campus/gdgy/Networkengineering1834/homework/11146\n-------- | -----\n传送门  | https://github.com/asiL-tcefreP/-software-engineering-2/tree/master\n\n## 一、模块接口的设计与实现过程</br>\n### 1.1 算法来源\n>文本相似度计算常用于网页去重以及NLP里文本分析等场景。文本相似度，可以分为两种，一种是字面相似度，另一种是语义相似度。本文记录的是文本的字面相似度的计算及实现，语义相似度计算则需要海量数据去计算语义值，较为复杂。\n最常用的且最简单的两种文本相似检测方法：局部敏感hash、余弦相似度\n\n在本案例中，用到的是局部敏感hash(LSH)中的simhash。计算出simhash值后，再计算hash值得汉明距离，即可得到文本的相似程度。\n\n**汉明距离：**</br>\n定义：两个长度相同的字符串对应位字符不同的个数</br>\n两个关键点：\n- 长度相同\n- 对应位字符不同\n传送门: [SimHash详细介绍](https://blog.csdn.net/wxgxgp/article/details/104106867).\n\n### 1.2 项目结构\n![](https://img-blog.csdnimg.cn/img_convert/971412fd7e34fe61415b460dc9d7dba3.png)\n包含文件读写类以及算法的实现类\n\n![](https://img-blog.csdnimg.cn/img_convert/569ab068579ac000d14787f32fcbc2c1.png)\n\n方法的接口如下：\n```java\npackage pers.fjl.papercheck.service;\n/**\n * @program: PaperCheck\n *\n * @description: ${description}\n *\n * @author: Fang Jiale\n *\n * @create: 2020-10-24 17:05\n **/\nimport pers.fjl.papercheck.service.impl.SimHashImpl;\n\nimport java.math.BigInteger;\nimport java.util.List;\n\npublic interface SimHash {\n    /**\n     * SimHash模块\n     * @return\n     */\n    BigInteger simHash();\n\n    /**\n     *计算哈希值\n     * @param source\n     * @return\n     */\n    BigInteger hash(String source);\n\n    /**\n     * 汉明距离\n     * @param other\n     * @return\n     */\n    int hammingDistance(SimHashImpl other);\n\n    /**\n     *计算汉明距离\n     * @param str1\n     * @param str2\n     * @return\n     */\n    double getDistance(String str1, String str2);\n\n    /**\n     *获取特征值\n     * @param simHashImpl\n     * @param distance\n     * @return\n     */\n    List subByDistance(SimHashImpl simHashImpl, int distance);\n}\n\n```\n实现类\n\n```java\npackage pers.fjl.papercheck.service.impl;\n/**\n * @program: PaperCheck\n *\n * @description: ${description}\n *\n * @author: Fang Jiale\n *\n * @create: 2020-10-24 17:05\n **/\nimport pers.fjl.papercheck.file.FileInput;\nimport pers.fjl.papercheck.service.SimHash;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class SimHashImpl implements SimHash {\n\n    private String tokens;\n\n    private BigInteger intSimHash;\n\n    private String strSimHash;\n\n    private int hashbits = 64;\n\n    public SimHashImpl(String tokens, int hashbits) {\n        this.tokens = tokens;\n        this.hashbits = hashbits;\n        this.intSimHash = this.simHash();\n    }\n\n    public BigInteger simHash() {\n        // 定义特征向量/数组\n        int[] v = new int[this.hashbits];\n        StringTokenizer stringTokens = new StringTokenizer(this.tokens);\n        while (stringTokens.hasMoreTokens()) {\n            String temp = stringTokens.nextToken();\n            //2、将每一个分词hash为一组固定长度的数列.比如 64bit 的一个整数.\n            BigInteger t = this.hash(temp);\n            for (int i = 0; i < this.hashbits; i++) {\n                BigInteger bitmask = new BigInteger(\"1\").shiftLeft(i);\n                // 3、建立一个长度为64的整数数组(假设要生成64位的数字指纹,也可以是其它数字),\n                // 对每一个分词hash后的数列进行判断,如果是1000...1,那么数组的第一位和末尾一位加1,\n                // 中间的62位减一,也就是说,逢1加1,逢0减1.一直到把所有的分词hash数列全部判断完毕.\n                if (t.and(bitmask).signum() != 0) {\n                    v[i] += 1;\n                } else {\n                    v[i] -= 1;\n                }\n            }\n        }\n        BigInteger fingerprint = new BigInteger(\"0\");\n        StringBuffer simHashBuffer = new StringBuffer();\n        for (int i = 0; i < this.hashbits; i++) {\n            // 4、最后对数组进行判断,大于0的记为1,小于等于0的记为0,得到一个 64bit 的数字指纹/签名.\n            if (v[i] >= 0) {\n                fingerprint = fingerprint.add(new BigInteger(\"1\").shiftLeft(i));\n                simHashBuffer.append(\"1\");\n            }else{\n                simHashBuffer.append(\"0\");\n            }\n        }\n        this.strSimHash = simHashBuffer.toString();\n        setStrSimHash(strSimHash);\n//        System.out.println(this.strSimHash + \" length \" + this.strSimHash.length());\n        return fingerprint;\n    }\n\n    public String getStrSimHash() {\n        return strSimHash;\n    }\n\n    public void setStrSimHash(String strSimHash) {\n        this.strSimHash = strSimHash;\n    }\n\n    public BigInteger hash(String source) {\n        if (source == null || source.length() == 0) {\n            return new BigInteger(\"0\");\n        } else {\n            char[] sourceArray = source.toCharArray();\n            BigInteger x = BigInteger.valueOf(((long) sourceArray[0]) << 7);\n            BigInteger m = new BigInteger(\"1000003\");\n            BigInteger mask = new BigInteger(\"2\").pow(this.hashbits).subtract(\n                    new BigInteger(\"1\"));\n            for (char item : sourceArray) {\n                BigInteger temp = BigInteger.valueOf((long) item);\n                x = x.multiply(m).xor(temp).and(mask);\n            }\n            x = x.xor(new BigInteger(String.valueOf(source.length())));\n            if (x.equals(new BigInteger(\"-1\"))) {\n                x = new BigInteger(\"-2\");\n            }\n            return x;\n        }\n    }\n\n    public int hammingDistance(SimHashImpl other) {\n\n        BigInteger x = this.intSimHash.xor(other.intSimHash);\n        int tot = 0;\n\n        //统计x中二进制位数为1的个数\n        //我们想想，一个二进制数减去1，那么，从最后那个1（包括那个1）后面的数字全都反了，对吧，然后，n&(n-1)就相当于把后面的数字清0，\n        //我们看n能做多少次这样的操作就OK了。\n\n        while (x.signum() != 0) {\n            tot += 1;\n            x = x.and(x.subtract(new BigInteger(\"1\")));\n        }\n        return tot;\n    }\n\n    public double getDistance(String str1, String str2) {\n        double distance;\n        if (str1.length() != str2.length()) {\n            distance = -1;\n        } else {\n            distance = 0;\n            for (int i = 0; i < str1.length(); i++) {\n                if (str1.charAt(i) != str2.charAt(i)) {\n                    distance++;\n                }\n            }\n        }\n        return distance;\n    }\n\n\n    public List subByDistance(SimHashImpl simHashImpl, int distance){\n        // 分成几组来检查\n        int numEach = this.hashbits/(distance+1);\n        List characters = new ArrayList();\n\n        StringBuffer buffer = new StringBuffer();\n\n        int k = 0;\n        for( int i = 0; i < this.intSimHash.bitLength(); i++){\n            // 当且仅当设置了指定的位时，返回 true\n            boolean sr = simHashImpl.intSimHash.testBit(i);\n\n            if(sr){\n                buffer.append(\"1\");\n            }\n            else{\n                buffer.append(\"0\");\n            }\n\n            if( (i+1)%numEach == 0 ){\n                // 将二进制转为BigInteger\n                BigInteger eachValue = new BigInteger(buffer.toString(),2);\n//                System.out.println(\"----\" +eachValue );\n                buffer.delete(0, buffer.length());\n                characters.add(eachValue);\n            }\n        }\n        return characters;\n    }\n\n//    public double distance(String strSimHash1,String strSimHash2){\n//        double distance;\n//        return hash1.getDistance(hash1.strSimHash,hash2.strSimHash);\n//    }\n\n    public static void main(String[] args) {\n        String origin=\"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig.txt\";\n        String[] s={\n        \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_add.txt\",\n        \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_del.txt\",\n        \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_1.txt\",\n                \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_10.txt\",\n                \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_15.txt\"};\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n\n        for (String s1 : s) {\n            SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s1), 64);\n            hash2.subByDistance(hash2, 3);\n            double distance = hash1.getDistance(hash1.strSimHash,hash2.strSimHash);\n            System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n        }\n    }\n}\n```\n\n```java\npackage pers.fjl.papercheck.file;\n/**\n * @program: PaperCheck\n *\n * @description: ${description}\n *\n * @author: Fang Jiale\n *\n * @create: 2020-10-24 17:05\n **/\nimport java.io.*;\n\npublic class FileInput {\n\n    public String readString(String FI){\n        int len=0;\n        StringBuffer str=new StringBuffer(\"\");\n        File file = new File(FI);\n        try {\n            FileInputStream fileInputStream = new FileInputStream(file);\n            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);\n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n            String line=null;\n            while((line=bufferedReader.readLine())!=null){\n                if (len!=0){\n                    str.append(\"\\r\\n\"+line);\n                }else {\n                    str.append(line);\n                }\n                len++;\n            }\n            bufferedReader.close();\n            fileInputStream.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return str.toString();\n    }\n\n    public static void main(String[] args) {\n        FileInput fileInput = new FileInput();\n        String s = fileInput.readString(\"G:\\\\orig.txt\");\n        System.out.println(s);\n    }\n\n}\n\n```\n\n## 二、测试\n### 2.1 单元测试\n这次测试只完成了空指针异常的测试，还应包括读写文件错误异常的测试。（后面有时间再commit）\n\n```java\npackage pers.fjl.test;\n\nimport org.junit.Test;\nimport pers.fjl.papercheck.file.FileInput;\nimport pers.fjl.papercheck.service.impl.SimHashImpl;\n\nimport java.math.BigInteger;\n\npublic class AllTest {\n    String origin=\"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig.txt\";\n    String[] s={\n            \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_add.txt\",\n            \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_del.txt\",\n            \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_1.txt\",\n            \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_10.txt\",\n            \"G:\\\\download\\\\app\\\\Git\\\\gitRepos\\\\paperpass\\\\src\\\\main\\\\resources\\\\orig_0.8_dis_15.txt\"};\n\n    @org.junit.Test\n    public void addTest(){\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s[0]), 64);\n        hash2.subByDistance(hash2, 3);\n        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n    }\n\n    @org.junit.Test\n    public void delTest(){\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s[1]), 64);\n        hash2.subByDistance(hash2, 3);\n        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n    }\n\n    @org.junit.Test\n    public void dis_1Test(){\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s[2]), 64);\n        hash2.subByDistance(hash2, 3);\n        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n    }\n\n    @org.junit.Test\n    public void dis_10Test(){\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s[3]), 64);\n        hash2.subByDistance(hash2, 3);\n        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n    }\n\n    @org.junit.Test\n    public void dis_15Test(){\n        FileInput fileInput = new FileInput();\n        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n        hash1.subByDistance(hash1, 3);\n        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(s[4]), 64);\n        hash2.subByDistance(hash2, 3);\n        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n    }\n\n//    @org.junit.Test\n//    public void FileNotFoundException(){\n//        FileInput fileInput = new FileInput();\n//        SimHashImpl hash1 = new SimHashImpl(fileInput.readString(origin), 64);\n//        hash1.subByDistance(hash1, 3);\n//        SimHashImpl hash2 = new SimHashImpl(fileInput.readString(\"G:\\\\1.txt\"), 64);\n//        hash2.subByDistance(hash2, 3);\n//        double distance = hash1.getDistance(hash1.getStrSimHash(),hash2.getStrSimHash());\n//        System.out.println(\"该文章与原文相似度为：\"+(100-distance*100/128)+\"%\");\n//    }\n}\n\n```\n\n### 2.2 覆盖率\n![](https://img-blog.csdnimg.cn/img_convert/0c2a5c0261a9003cde0f79623d4c9a6f.png)\n![](https://img-blog.csdnimg.cn/img_convert/bd6bcdaa4425233ab7126e84cd6edc3f.png)\n![](https://img-blog.csdnimg.cn/img_convert/d3877fd896402508eb9da877f0fe116b.png)\n\n## 三、性能检测\n![](https://img-blog.csdnimg.cn/img_convert/a9ee30d2baea873fe12a69b8ae55f40d.png)\n![](https://img-blog.csdnimg.cn/img_convert/30a3812d85bb450e5409b199e46bb09e.png)\n![](https://img-blog.csdnimg.cn/img_convert/7687ef8cb388b8afcf5d5ec7a4759599.png)\n对该性能分析工具的使用还不太熟练，但可以看见的是，使用了GC之后，char,与String依旧占据内存的大部分。\n![](https://img-blog.csdnimg.cn/img_convert/ed82db430614426a86b7982b93e8a322.png)', '2020-09-02 19:53:45', 'https://unsplash.it/800/450?image=1050', '发布', '2', '0', '1', '原创', null, '72', '6', '论文查重很复杂？还在为知网论文查重白白地交冤枉钱？不如自己来试试如何简单实现论文查重！', '1', '1');
INSERT INTO `blog` VALUES ('1355697631751966722', '单链表逆序的几种方法', '84351321231233', '&emsp;最近做了几道leetcode，发现自己还是没有形成知识体系，因此决定把所学的做个积累。这篇文章主要讲的是**单链表逆序的两种方法**：**头插法与递归**。（目前只想到两种，持续更新）\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200821184809352.png#pic_center)**带头结点的单链表**\n\n### 一、头插法\n&emsp;头插法，顾名思义就是从链表的头部插入。当我们要把该链表顺序逆序成head->4->3->2->1时（头结点不用），显然我们需要两个指针cur（指向要插入的结点），next（指向cur的下一个结点）。\n\n&emsp;在此，我用了一个辅助的头结点reverseHead便于操作，cur首先指向的是值为1的结点，next指向的是2。这时，把cur指向的结点放在reversehead后，再让cur=next，继续放下一个结点...以此类推，**后面的结点都放在了reverseHead的最前面**，即实现了逆序。\n\n\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200821191759293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70#pic_center)\n**上面展示的是第一个结点的情况，画的有点丑，不过应该能看懂。。**\n```java\npublic static void reverseList(Node head) {\n        //如果当前链表为空，或者只有一个节点，无需反转，直接返回\n        if(head.next == null || head.next.next == null) {\n            return ;\n        }\n\n        //定义一个辅助的指针(变量)，帮助我们遍历原来的链表\n        Node cur = head.next;\n        Node next = null;// 指向当前节点[cur]的下一个节点\n        Node reverseHead = new Node(0);\n        //遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端\n        \n        while(cur != null) {\n            next = cur.next;//先暂时保存当前节点的下一个节点，因为后面需要使用\n            cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端\n            reverseHead.next = cur; //将cur 连接到新的链表上\n            cur = next;//让cur后移\n        }\n        //将head.next 指向 reverseHead.next , 实现单链表的反转\n        head.next = reverseHead.next;\n\n    }\n```\n\n### 二、递归法\n&emsp;\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202008211939004.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70#pic_center)\n接着，又回溯到上一个递归中去，即head指向的值为2，以此类推。\n\n```java\n    public HeroNode reverseList(Node head){\n        if (head == null || head.next == null) {\n            return head;\n        }\n        // 找到原来链表的最后一个结点，即为逆序后链表的第一个结点\n        Node reverseHead = reverseList(head.next);       \n         \n        Node temp  = head.next;\n        // 实现一个结点的逆序\n        temp.next = head;\n        head.next = null;\n        // 返回逆袭后链表的头结点\n        return reverseHead;\n    }\n```\n', '2020-03-01 14:08:58', 'https://unsplash.it/800/450?image=106', '发布', '2', '0', '1', '转载', null, '41', '5', '这是关于单链表逆序的几种方法，大家一起来看看吧！', '0', '1');
INSERT INTO `blog` VALUES ('1356075450692730882', 'elasticSearch安装ik分词器插件后报错: java.security.AccessControlContext', '65456132132133155', '\n![异常信息](https://img-blog.csdnimg.cn/20210118213724387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&emsp; elasticSearch在安装完ik分词器插件启动后的报错异常信息如上↑，根据命令行信息可知，应该是es的权限不足，因此配置一下即可。\n&emsp; 找到jdk安装位置，![在这里插入图片描述](https://img-blog.csdnimg.cn/20210118214043428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&emsp; E:\\study file\\jdk1.8.0_221\\jre\\lib\\security（本机目录，自行替换即可），打开jre目录下的java.policy文件，在grant{ };中加入一行即可，permission java.security.AllPermission;\n&emsp; 此外，要记得es存放位置的文件夹名不能有空格，否则也会被报io异常\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210118214242845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n', '2020-11-28 11:12:58', 'https://unsplash.it/800/450?image=353', '发布', '1', '0', '1', '原创', null, '29', '6', 'elasticSearch安装ik分词器插件后报错: java.security.AccessControlContext，可能与jdk配置有关', '1', '1');
INSERT INTO `blog` VALUES ('1356077342923620353', '基于Java Swing与TCP/IP协议完成的简单聊天程序', '1354330782506385410', '**一.功能介绍**\n	\n&nbsp; &nbsp;首先，要完成多人聊天的程序，我们要先明白其运行的基本机制是什么？\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804133248935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n**该图源自网上** \n\n\n*[HTML]:   超文本标记语言\n\n&nbsp; &nbsp;当两个用户进行通讯时，是采用C/S模式进行的。也就是说，当两个客户端进行通讯时，并不止是两个用户之间建立了tcp链接，而是当客户端登录服务器时，服务器获取了客户端的Socket，并存储下来。当两个客户端想要通讯时，服务器拿出这两个客户端的socket后，再进行通讯。*****服务器的功能有点类似于中转站***** \n\n\n&nbsp; &nbsp;因此，不难预见，该程序也要用到多线程的调度，以及数据库简单的增删改查操作。\n![功能图](https://img-blog.csdnimg.cn/20200804132819869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n	&nbsp; &nbsp;此外，该程序还简单实现了文件的传输功能。\n\n**二、项目结构与程序简单的展示**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135201191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n**二．（1）登录界面**\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020080413552372.png)\n**二．（2）用户好友列表界面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135542453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&nbsp; &nbsp;该图展示了三个用户的界面，方便分析。\n\n&nbsp; &nbsp;从左到右依次展示的是：\n\n好友列表：用户添加的所有好友。\n对等方列表：展示的是已经上线的对等方。\n在线的好友：用户当前在线的好友。\n可以得知的是，对等方列表是根据只要有一个对等方上线即把它加入列表，并不会判断新上线的对等方是不是自己的好友。这也是对等方列表与在线的好友的主要区别。\n\n**二．（3）聊天界面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135657291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&nbsp; &nbsp;一个用户可以同时与多个用户同时在线聊天\n\n&nbsp; &nbsp;当在聊天窗口点击选择文件发送的按钮时，此时你即为发送方，跟你聊天的那个人为接收方。接收方的窗口会弹出一个是否接收文件的请求，\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135843747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135854194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&nbsp; &nbsp;发送方弹出选择文件的窗口\n\n&nbsp; &nbsp;发送方选择完后，接收方选择保存文件的路径\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804135940969.png)\n&emsp;点击发送\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804140214700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020080414022179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&emsp;上述打印的相同的数据是用来缓冲文件的字节数组，一个数组大小1KB（该文件大小7KB），上传于下载完毕后，发送方和接收方都会在控制台打印出相关信息。\n\n**二．（4）用户个人界面（其余功能）**\n\n&emsp;该界面可以实现对好友的操作，群聊、聊天记录、画板等功能，本文主要讲述核心功能的实现，在此略过。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200804140425664.png)\n\n**二、部分功能的代码实现**\n\n```java\n\nimport java.io.*;\nimport java.net.*;\n\nimport pers.fjl.communication_system.Thread.ConnectThread;\nimport pers.fjl.communication_system.Thread.adminConnectThread;\nimport pers.fjl.communication_system.transfer_files.Download;\nimport pers.fjl.communication_system.transfer_files.Jdbc_downloadpath;\nimport pers.fjl.communication_system.utils.name;\n\npublic class server implements java.io.Serializable {\n		private static int i=0;\n		private static String DownloadPath=null;\n\n	public void Startserver() {\n		try {\n\n			System.out.println(\"服务器启动，端口是5228\");\n			ServerSocket ss=new ServerSocket(5228);\n			while(true) {\n			//阻塞,等待连接			\n			Socket s = ss.accept();\n				ObjectInputStream ois=null;\n				String downloadpath=Jdbc_downloadpath.getDownloadpath();\n				if(!downloadpath.equals(\"0\")){\n					InputStream is=s.getInputStream();  //获取发送方的流\n//					ObjectInputStream is=new ObjectInputStream(s.getInputStream());\n					System.out.println(downloadpath);\n					FileOutputStream fos=new FileOutputStream(downloadpath,true);\n					System.out.println(\"Download2\");\n					byte[] b=new byte[1024];\n					int len;\n					while ((len=is.read(b))!=-1){\n						fos.write(b,0,len);\n					}\n					System.out.println(\"数据下载完成\");\n					Jdbc_downloadpath.deleteDownloadpath(downloadpath);\n				}else {\n						ois=new ObjectInputStream(s.getInputStream());\n						name n=(name)ois.readObject();	//强转从客户端获取对象o\n//			System.out.println(\"服务器启2收到id\"+n.getId()+n.getPassword());\n						ConnectThread ct=new ConnectThread(s);	//启动与该客户说话的线程\n						Download dl=new Download(s);\n//				dl.start();\n						adminConnectThread.addConnectThread(n.getId(),ct);//获取用户名和线程加入到哈希表\n\n						ct.start();\n						ct.tellalluser(n.getId());\n				}\n			}\n		} catch (Exception  e) {\n			// TODO 自动生成的 catch 块\n			e.printStackTrace();\n		}		\n	}\n\n	}\n```\n**服务器端**\n\n```java\n\nimport java.io.IOException;\nimport java.io.*;\nimport java.net.*;\n\nimport pers.fjl.communication_system.Thread.CSThread;\nimport pers.fjl.communication_system.Thread.adminCSThread;\nimport pers.fjl.communication_system.udp.getHostIp;\nimport pers.fjl.communication_system.utils.name;\n\npublic class client implements java.io.Serializable{	\n	public Socket s;\n	private String name;\n	private String password;\n	\n	public client(Object o) {	//采用对象流,从user_login类获取	\n		try {			\n			s=new Socket(\"127.0.0.1\",5228);\n			new getHostIp();\n			ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());\n			oos.writeObject(o);			\n			CSThread cst=new CSThread(s);//创建该用户和服务器保持通讯的线程\n			cst.start();\n			adminCSThread.addCSThread(((name)o).getId(), cst);	//得到o的用户名\n			\n		} catch (UnknownHostException e) {\n			// TODO 自动生成的 catch 块\n			e.printStackTrace();\n		} catch (IOException e) {\n			// TODO 自动生成的 catch 块\n			e.printStackTrace();\n		}\n	}\n	\n\n}\n```\n**客户端**\n\n&emsp;需要注意的是，当服务器和客户端启动时，都要启动管理socket的线程，以便管理服务器与客户端之间的连接，在此我使用哈希表管理线程。（用户名为键）\n\n```java\n\nimport java.awt.Container;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Map;\n\nimport javax.swing.*;\n\nimport pers.fjl.communication_system.Thread.adminCSThread;\nimport pers.fjl.communication_system.Thread.adminfriendlist;\nimport pers.fjl.communication_system.udp.peer;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport pers.fjl.communication_system.client.client;\nimport pers.fjl.communication_system.utils.*;\n\n\npublic class user_login extends JFrame implements java.io.Serializable{	//登录界面，先执行user_login()方法\n	private static final long serialVersionUID=1L;		//实现序列化不同版本的兼容性\n	protected  String  correctname;	\n	protected  String correctpassword;		//声明两个变量，用于传给子类启动数据库\n	protected boolean flag;\n	public static boolean flag2;	//用来传递是否从数据库查询成功的真值\n	public static boolean flag3;	//用来传递是否从数据库查询成功的真值\n	\n	public boolean isFlag() {\n		return flag;\n	}\n\n	public void setFlag(boolean flag) {\n		this.flag = flag;\n	}\n\n	public String getCorrectname() {\n		return correctname;\n	}\n\n	public void setCorrectname(String correctname) {\n		this.correctname = correctname;\n	}\n\n	public String getCorrectpassword() {\n		return correctpassword;\n	}\n\n	public void setCorrectpassword(String correctpassword) {\n		this.correctpassword = correctpassword;\n	}\n\n	public user_login() {\n		setTitle(\"登录窗体\");			//窗体标题\n		setBounds(800,400,300,150);		\n		Container c=getContentPane();		//容器\n		c.setLayout(null);\n		JLabel jl1=new JLabel(\"用户名:\");		//标签\n		jl1.setBounds(10, 10, 200, 18);\n		\n		final JTextField name = new JTextField();	\n        name.setBounds(80, 10, 150, 18);\n		\n        JLabel jl2=new JLabel(\"密码:\");\n		jl2.setBounds(10, 50, 200, 18);\n		\n		final JPasswordField password=new JPasswordField();		//创建密码框对象\n		password.setBounds(80,50 , 150, 18);	//设置位置大小\n		c.add(jl1);\n		c.add(name);\n		c.add(jl2);\n		c.add(password);			//全部加到容器中\n		\n		JButton jb=new JButton(\"确定\");\n		jb.addActionListener(new ActionListener() {\n			public void actionPerformed(ActionEvent e) {\n				user_login a=new user_login();			//创建对象\n				a.dispose();			//关掉因实例化a而多出来的窗口\n                a.setCorrectname(name.getText().trim());	\n                System.out.println(a.getCorrectname());\n                char data[]=password.getPassword();\n                a.setCorrectpassword(new String(data));	//用户名和密码\n                \n                new  user_login(a.getCorrectname(),a.getCorrectpassword());	\n                System.out.println(flag2);      \n                \n                \n				if(name.getText().trim().length()==0\n						|| new String(password.getPassword()).trim().length()==0) {		//除去空格后，长度为0的话\n					JOptionPane.showMessageDialog(null, \"用户名或者密码不准为空\");\n					return;\n				}\n								\n				if (flag2 && !flag3) {\n						\n                    JOptionPane.showMessageDialog(null, \"登录成功\");       \n                    \n                    JdbcTemplate template=new JdbcTemplate(druid_utils.getDataSource());\n            		String sql=\"update user set onlinestatus=1 where username=?\";\n            		template.update(sql,a.getCorrectname());//下线时状态为0，用户上线则把状态改变为1\n                    \n                    correctname=name.getText().trim();\n                    correctpassword=new String(password.getPassword());\n                   \n        			\n                    close_login cl=new close_login();  //创建线程类的对象\n                                           \n                    try {\n						Thread.sleep(800);			//	登录成功后，过0.8s关掉登录页面\n						cl.start();	\n											  \n					} catch (InterruptedException e1) {\n						// TODO 自动生成的 catch 块\n						e1.printStackTrace();\n					}\n               	          \n                } else if(flag2==false){\n                    JOptionPane.showMessageDialog(null, \"用户名或密码错误\");	\n                }else if(flag2 && flag3) {\n                	JOptionPane.showMessageDialog(null, \"该用户已在线，请勿重新登录\");	\n                }\n			}\n			\n		});\n		 jb.setBounds(80, 80, 60, 18);\n	        c.add(jb);\n	        \n	        final JButton button = new JButton();\n	        button.setText(\"重置\");\n	        button.addActionListener(new ActionListener() {\n	            public void actionPerformed(ActionEvent arg0) {\n	                // TODO 自动生成方法存根\n	                name.setText(\"\");			\n	                password.setText(\"\");		//清空文本框实现重置操作\n	            }\n	        });\n	        button.setBounds(150, 80, 60, 18);\n	        getContentPane().add(button);\n\n	        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n	        setVisible(true);\n	}\n	\n	public user_login(String username,String password) {\n		// TODO 自动生成的方法存根	\n		\n		Connection conn=null;		\n		ResultSet rs=null;\n		PreparedStatement pstmt=null;\n		\n		Map<String, Object>map=null;\ntry {\n	conn=jdbc_utils.getConnection();		//调用工具类，加载驱动获取连接\n	String sql=\"select * from user where username= ? and password = ?\";		//?来拼接\n	pstmt=conn.prepareStatement(sql);\n\n	pstmt.setString(1,username);\n	pstmt.setString(2, password);				//给问号赋值\n	rs =pstmt.executeQuery();			//执行查询表中的用户名和密码\n	flag2=rs.next();			//如果有下一行，则返回true。表示如果能从数据库找到账号密码则，返回true,否则返回false\n	\n	try{\n        JdbcTemplate template=new JdbcTemplate(druid_utils.getDataSource());\n		String sql2=\"select * from user where username=? and onlinestatus =1\";\n		map=template.queryForMap(sql2,username);\n		if(map!=null) {\n			flag3=true;\n			}\n		}catch(Exception e) {\n			flag3=false;		//搜索不到在线状态为1的该用户名，则会发生异常\n		}\n\n	\n}catch (SQLException e) {\n	// TODO 自动生成的 catch 块\n	e.printStackTrace();\n}finally {				//释放资源\n\n	jdbc_utils.close(rs, pstmt, conn);			//	调用工具类，关闭资源\n\n}	\n		}\n		\n	public static void main(String[] args) {\n		new user_login();		\n	}\n	\n	class close_login extends Thread{	\n		public void run(){\n			user_login.this.dispose();		//登录成功后，用来自动关掉登录的页面\n			name n=new name();\n			n.setId(correctname);\n			n.setPassword(correctpassword);\n\n			new client(n);		//开启该客户端\n			try {				\n				friendlist f=new friendlist(correctname);	//	打开好友界面	\n				adminfriendlist.addfriendlist(correctname, f);\n				ObjectOutputStream oos=new ObjectOutputStream\n						(adminCSThread.getCSThread(n.getId()).getS().getOutputStream());\n			\n				Message m=new Message();\n				m.setMesType(MesType.MesType_onlinenum);	//发好友的状态\n				m.setSender(correctname);//要的是刚登陆的用户的好友列表				\n				oos.writeObject(m);\n				\n			} catch (IOException e) {\n				// TODO 自动生成的 catch 块\n				e.printStackTrace();\n			}finally{\n				new peer(correctname);		//会阻塞程序,放在最后\n			}\n			\n		}	\n}}\n```\n**登录验证的窗体以及方法**\n&emsp;该方法代码有点冗余，看看就好。\n\n```java\n\nimport javax.swing.*;\n\nimport pers.fjl.communication_system.Thread.adminCSThread;\nimport pers.fjl.communication_system.Thread.adminchat;\nimport pers.fjl.communication_system.transfer_files.Transfer_file;\nimport pers.fjl.communication_system.transfer_files.Upload;\nimport pers.fjl.communication_system.chat_record.record;\nimport pers.fjl.communication_system.utils.Message;\n\nimport java.io.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\npublic class chat extends JFrame implements ActionListener,java.io.Serializable {	//与好友聊天的界面\n\n	JTextArea jta;\n	JTextField jtf;\n	JButton jb1,jb2;	//发送按钮和选择文件夹的按钮\n	JPanel jp;\n	String myname;\n	String friendname;\n	//	public static void main(String[] args) {\n//		// TODO 自动生成的方法存根\n//		chat ct=new chat(\"s\");\n//	}\n	public chat(String myname,String friend) {\n		this.myname=myname;\n		this.friendname=friend;\n		jta=new JTextArea();\n		jtf=new JTextField(30);\n		jb1=new JButton(\"发送\");\n		jb1.addActionListener(this);\n		jb2=new JButton(\"选择文件发送\");\n		jb2.addActionListener(this);\n		jp=new JPanel();\n		jp.add(jtf);\n		jp.add(jb1);\n		jp.add(jb2);\n\n		this.add(jta,\"Center\");\n		this.add(jp,\"South\");\n		this.setTitle(\"你(\"+myname+\")正在和\"+friend+\" 聊天\");\n		this.setBounds(800, 400, 550, 460);\n		this.setVisible(true);\n	}\n\n	public void download_or_not(String friendname){//接收方弹出是否下载文件的确认框\n\n		int isDelete = JOptionPane.showConfirmDialog(null, \"请问是否接收？\", friendname+\"给你(\"+myname+\")发来了文件\", JOptionPane.YES_NO_CANCEL_OPTION);\n		if(isDelete == JOptionPane.YES_OPTION){\n			System.out.println(\"download or not我的名字\"+myname+friendname);\n			Transfer_file t=new Transfer_file();\n			chat c=	adminchat.getchat(myname+\" \"+friendname);	//在friendlist的时候加入的哈希表的键值取出\n			Transfer_file a=new Transfer_file();\n			a.Sender_filepath(friendname,myname);\n//			c.upload_or_not();		//弹出是否发送的确认框\n//			t.Downloader_filepath(friendname,myname);		//下载人而言,他的朋友就是最初的发送者\n		}\n	}\n\n	public void upload_or_not(String UploadPath,String Uploader){//发送方弹出是否发送文件的确认框\n\n		int isDelete = JOptionPane.showConfirmDialog(null, \"是\", \"开始发送？\", JOptionPane.YES_NO_CANCEL_OPTION);\n		if(isDelete == JOptionPane.YES_OPTION){\n			System.out.println(\"upload_or_not\"+Uploader);\n			Transfer_file a=new Transfer_file();\n			new Upload(UploadPath,Uploader);\n//			a.Sender_filepath(String );\n//			new Upload();\n		}\n	}\n\n	public void showMessage(Message m) {\n		String info=\"        \"+m.getSender()+\"对你(\"+m.getReceiver()+\")说：\"+m.getInfo()+\"\\r\\n\";\n		String time=m.getSendtime();\n		this.jta.append(time+\"\\n\");	//加到自己的文本域上显示\n		this.jta.append(info);	//加到自己的文本域上显示\n		new record(m.getReceiver(),m.getSender(),info);//存储聊天记录\n	}\n\n	public void actionPerformed(ActionEvent e) {\n		// TODO 自动生成的方法存根\n		if(e.getSource()==jb1) {//如果点了发送\n			Date d = new Date();	//用来获取时间\n			SimpleDateFormat sdf = new SimpleDateFormat(\"yy年MM月dd日 E HH:mm:ss\");\n			String msg=\"        【你对\"+friendname+\"说】：\"+jtf.getText();\n			new record(myname,friendname,msg);//存储聊天记录\n			this.jta.append(sdf.format(d)+\"\\n\");\n			this.jta.append(msg+\"\\n\");\n			Message m=new Message();\n			m.setSender(this.myname);\n			m.setReceiver(this.friendname);\n			m.setInfo(jtf.getText());\n			m.setMesType(\"3\");//这是信息包\n			jtf.setText(\"\");\n\n			m.setSendtime(sdf.format(d));\n//			m.setSendtime(new java.util.Date().toString());\n			System.out.println(\"这里是chat类\"+m.getSender());\n\n			try {	//通过类取得线程，通过线程取得Socket\n				ObjectOutputStream oos=new ObjectOutputStream\n						(adminCSThread.getCSThread(myname).getS().getOutputStream());	//这是客户端的Socket s产生的输出流，只有服务器端的输入流才能获取\n\n				oos.writeObject(m);\n			} catch (IOException e1) {\n				// TODO 自动生成的 catch 块\n				e1.printStackTrace();\n			}\n		}else if(e.getSource()==jb2){//选择文件发送\n\n			try {\n				Transfer_file a=new Transfer_file();\n				ObjectOutputStream oos=new ObjectOutputStream\n						(adminCSThread.getCSThread(myname).getS().getOutputStream());     //这里要修改的\n				Message m=new Message();\n				m.setSender(this.myname);\n				m.setReceiver(this.friendname);\n				m.setMesType(\"6\");  //这是传输文件的包\n				oos.writeObject(m);         //发送给服务器\n//				a.Sender_filepath();	//选择要发送的文件\n			} catch (IOException ioException) {\n				ioException.printStackTrace();\n			}\n		}\n	}\n\n	public static void main(String[] args) {\n//		new chat(\"张三\",\"李四\");\n\n	}\n}\n```\n**chat聊天窗体以及里面的方法**\n\n下面是两个管理通讯的线程：\n\n```java\n\nimport java.net.*;\n\nimport pers.fjl.communication_system.Thread.adminchat;\nimport pers.fjl.communication_system.Thread.adminfriendlist;\nimport pers.fjl.communication_system.settings.chat;\nimport pers.fjl.communication_system.settings.friendlist;\nimport pers.fjl.communication_system.utils.MesType;\nimport pers.fjl.communication_system.utils.Message;\n\nimport java.io.*;\n\npublic class CSThread extends Thread {//客户端连接服务端的线程\n	private Socket s;\n\n	public CSThread(Socket s) {\n		this.s=s;\n	}\n\n	public Socket getS() {\n		return s;\n	}\n	public void setS(Socket s) {\n		this.s = s;\n	}\n\n	public void run() {\n		System.out.println(\"CSThread启动了\");\n		while(true) {\n			//不停读取从服务端发来的消息\n			try {\n\n//				String downloadpath= Jdbc_downloadpath.getDownloadpath();\n					//如果不是对象流则不作任何处理\n					ObjectInputStream ois=new ObjectInputStream(s.getInputStream());\n					Message m=(Message)ois.readObject();\n\n					if(m.getMesType().equals(MesType.MesType_returnnum)) {\n						System.out.println(\"CST读取从服务器发来的消息\"+m.getInfo());\n						String info=m.getInfo();	//返回在线人的列表\n						String friends[]=info.split(\" \");//拆分\n						String receiver=m.getReceiver();//刚才的发送者要接收传回去的好友列表\n						friendlist fr= adminfriendlist.getfriendlist(receiver);//返回一个好友列表\n						if(fr!=null) {\n							//代表这是返回好友列表的，里面的包并不是用来传递聊天信息\n						}\n					}else if(m.getMesType().equals(MesType.MesType_transfer_file)){\n						System.out.println(\"接收方收到了发送方发送文件的请求\");\n						chat c=	adminchat.getchat(m.getReceiver()+\" \"+m.getSender());	//在friendlist的时候加入的哈希表的键值取出\n						c.download_or_not(m.getSender());		//弹出是否下载的确认框\n					}\n\n					else {//好友列表是空的，代表里面的包是用来传递客户端间的聊天讯息\n						chat c=	adminchat.getchat(m.getReceiver()+\" \"+m.getSender());	//在friendlist的时候加入的哈希表的键值取出\n						c.showMessage(m);\n					}\n\n\n			} catch (Exception e) {\n				// TODO 自动生成的 catch 块\n//				e.printStackTrace();\n//				System.out.println(\"CSThread出现异常\");\n			}\n\n		}\n	}\n\n}\n```\n**管理客户端连接服务器的线程**\n\n```java\n\nimport java.net.*;\nimport java.util.*;\n\nimport pers.fjl.communication_system.utils.MesType;\nimport pers.fjl.communication_system.utils.Message;\n\nimport java.io.*;\n\npublic class ConnectThread extends Thread implements java.io.Serializable{//服务器和某个客户端的通讯线程\n	Socket s;\n\n	public ConnectThread(Socket s) {//给线程连接通道,获取客户端的s\n		this.s=s;\n	}\n\n	public void tellalluser(String own) {//另外一个用户登录后，刷新上线的表，告诉以前的人上线请求\n		HashMap hm=adminConnectThread.hm;\n		Iterator it=hm.keySet().iterator();\n\n		while(it.hasNext()) {//取出在线人的列表\n			Message m=new Message();\n			m.setInfo(own);\n			m.setMesType(MesType.MesType_returnnum);\n\n			String onlineuser=it.next().toString();\n			try {\n				ObjectOutputStream oos=new ObjectOutputStream(adminConnectThread.getConnectThread(onlineuser).s.getOutputStream());\n				m.setReceiver(onlineuser);//把包给已经上线的人\n				oos.writeObject(m);\n			} catch (IOException e) {\n				// TODO 自动生成的 catch 块\n				e.printStackTrace();\n			}\n\n		}\n	}\n\n	public void run() {\n		System.out.println(\"线程运行了\");\n		while(true) {\n			try {\n\n				ObjectInputStream ois=new ObjectInputStream(s.getInputStream());\n				Message m=(Message)ois.readObject();	//chat那里，服务器拿到的\n\n				if(m.getMesType().equals(MesType.MesType_onlinenum)){//把服务器上线的人给客户返回\n\n					String res=adminConnectThread.getonlineuser();\n					Message m2=new Message();\n					m2.setMesType(MesType.MesType_returnnum);\n					m2.setInfo(res);\n					m2.setReceiver(m.getSender());//最初的发送者此时变为接受者接回服务器发回给其的好友信息\n					ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());//s是接收信息的人与服务器的连接\n					oos.writeObject(m2);\n				}else if (m.getMesType().equals(MesType.MesType_transfer_file)){//传输文件的\n					System.out.println(\"ConnectThread 收到发送方\"+m.getSender()+\"给\"+m.getReceiver()+\"的消息\");\n					Message m3=new Message();\n					m3.setMesType(MesType.MesType_transfer_file);\n					m3.setSender(m.getSender());\n					m3.setReceiver(m.getReceiver());	//\n					//应该输出把流输出给接收方\n//					ObjectOutputStream oos=new ObjectOutputStream\n//							(adminCSThread.getCSThread(m.getReceiver()).getS().getOutputStream());\n					ConnectThread ct=adminConnectThread.getConnectThread(m.getReceiver());//找到接收人的通讯线程，并给她\n					ObjectOutputStream oos=new ObjectOutputStream(ct.s.getOutputStream());//s是接收信息的人与服务器的连接\n//						ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());//s是接收信息的人与服务器的连接\n					oos.writeObject(m3);\n				}\n				else{\n					ConnectThread ct=adminConnectThread.getConnectThread(m.getReceiver());//找到接收人的通讯线程，并给她\n					ObjectOutputStream oos=new ObjectOutputStream(ct.s.getOutputStream());//s是接收信息的人与服务器的连接\n					oos.writeObject(m);//给接收人的包\n				}\n\n//\n			} catch (Exception e) {\n				// TODO 自动生成的 catch 块\n				e.printStackTrace();\n			}\n\n		}\n	}\n}\n```\n**服务器连接客户端的线程**', '2020-06-25 11:12:55', 'https://unsplash.it/800/450?image=1025', '发布', '1', '0', '1', '原创', null, '35', '4', '基于tcp协议与多线程完成的简单聊天程序：1、用户登录及登录验证：\n2、两两聊天功能：\n3、建群及群聊功能：\n4、好友管理：\n5、在线、离线状态显示：\n6、聊天记录管理：', '0', '1');
INSERT INTO `blog` VALUES ('1356079071975112705', '基于maven构建一个SSM工程案例', '1356025819581571074', '# 基于maven构建一个简单SSM工程案例\n前段时间看某马视频学习了maven的使用以及Spring+SpringMVC+Mybatis框架的基本使用，发现自己根本没有清楚掌握其中的业务逻辑，只是跟着视频一点一点的抄着代码，故写下此文巩固一下所学。\n\n首先，当然是用万能的idea创建一个maven工程,选上webapp的项目。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200922211131359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70#pic_center)\n随便创建一个含有几个属性的表和一个元组，接下来就是配置pom.xml文件了。\n\n@[TOC](目录)\n## 1.配置pom.xml文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020092221305566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70#pic_center)\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>pers.fjl</groupId>\n  <artifactId>ssmweb</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>war</packaging>\n\n  <name>ssmweb Maven Webapp</name>\n  <!-- FIXME change it to the project\'s website -->\n  <url>http://www.example.com</url>\n\n  <!-- 统一管理jar包版本 -->\n  <properties>\n    <spring.version>5.0.2.RELEASE</spring.version>\n    <slf4j.version>1.6.6</slf4j.version>\n    <log4j.version>1.2.12</log4j.version>\n    <shiro.version>1.2.3</shiro.version>\n    <mysql.version>5.1.6</mysql.version>\n    <mybatis.version>3.4.5</mybatis.version>\n    <spring.security.version>5.0.1.RELEASE</spring.security.version>\n  </properties>\n\n  <!-- 锁定jar包版本 -->\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>${spring.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-web</artifactId>\n        <version>${spring.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>${spring.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-tx</artifactId>\n        <version>${spring.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>${spring.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>${mybatis.version}</version>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <!-- 项目依赖jar包 -->\n  <dependencies>\n    <!-- spring -->\n    <dependency>\n      <groupId>org.aspectj</groupId>\n      <artifactId>aspectjweaver</artifactId>\n      <version>1.6.8</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context-support</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-web</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-orm</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-webmvc</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-tx</artifactId>\n      <version>${spring.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>${mysql.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>jsp-api</artifactId>\n      <version>2.0</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>jstl</groupId>\n      <artifactId>jstl</artifactId>\n      <version>1.2</version>\n    </dependency>\n    <!-- log start -->\n    <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-api</artifactId>\n      <version>${slf4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-log4j12</artifactId>\n      <version>${slf4j.version}</version>\n    </dependency>\n    <!-- log end -->\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>${mybatis.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n      <version>1.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>c3p0</groupId>\n      <artifactId>c3p0</artifactId>\n      <version>0.9.1.2</version>\n      <type>jar</type>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.github.pagehelper</groupId>\n      <artifactId>pagehelper</artifactId>\n      <version>5.1.2</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-web</artifactId>\n      <version>${spring.security.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-config</artifactId>\n      <version>${spring.security.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-core</artifactId>\n      <version>${spring.security.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-taglibs</artifactId>\n      <version>${spring.security.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid</artifactId>\n      <version>1.0.9</version>\n    </dependency>\n  </dependencies>\n  <!-- 添加tomcat7插件 -->\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.tomcat.maven</groupId>\n        <artifactId>tomcat7-maven-plugin</artifactId>\n        <version>2.2</version>\n      </plugin>\n    </plugins>\n  </build>\n\n\n</project>\n\n```\npom文件中我导了比较多的依赖便于后面其他项目的运行，各位按需导入即可\n\n## 2.实现spring+mybatis的整合\n首先创建实体类Item来封装从数据库中获取的数据，接着用持久层DAO创建方法的实现接口，spring配置文件分为两个更加清晰，mapper文件负责映射。**第二节主要是配置后端Service业务层以及DAO持久层。**<br>\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200922213529567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70#pic_center)\n\n### 2.1 创建POJO（实体类） \n\n```java\npackage pers.fjl.ssm.pojo;\n\nimport java.util.Date;\n\npublic class Item {\n    private Integer id;\n    private String name;\n    private float price;\n    private Date createtime;\n    private String detail;\n\n    @Override\n    public String toString() {\n        return \"pojo{\" +\n                \"id=\" + id +\n                \", name=\'\" + name + \'\\\'\' +\n                \", price=\" + price +\n                \", createtime=\" + createtime +\n                \", detail=\'\" + detail + \'\\\'\' +\n                \'}\';\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public float getPrice() {\n        return price;\n    }\n\n    public void setPrice(float price) {\n        this.price = price;\n    }\n\n    public Date getCreatetime() {\n        return createtime;\n    }\n\n    public void setCreatetime(Date createtime) {\n        this.createtime = createtime;\n    }\n\n    public String getDetail() {\n        return detail;\n    }\n\n    public void setDetail(String detail) {\n        this.detail = detail;\n    }\n}\n\n```\n\n### 2.2 持久层DAO接口编写 \nDAO接口写上方法即可，\n\n```java\npackage pers.fjl.ssm.dao;\n\nimport pers.fjl.ssm.pojo.Item;\n\npublic interface ItemMapper {\n    public Item findById(int id);\n}\n\n```\n\n### 2.3 Mapper映射文件编写(ItemMapper.xml)\n这里注意把命名空间设定为DAO的接口即可，其余都是比较简单的。<br>\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"pers.fjl.ssm.dao.ItemMapper\">\n    <select id=\"findById\" parameterType=\"int\" resultType=\"Item\">\n        select * from items where id = #{id}\n    </select>\n</mapper>\n\n```\n\n### 2.4 业务层Service编写 \n接口的编写<br>\n\n```java\npackage pers.fjl.ssm.service;\n\nimport pers.fjl.ssm.pojo.Item;\n\npublic interface ItemService {\n    public Item findById(int id);\n}\n\n```\n接口的实现类，需要注意的是，采用Spring注解方式配置的Service层，需要在applicationContext-service.xml中配置扫描组件以及事务管理器，这个在下文中有提到。\n```java\npackage pers.fjl.ssm.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport pers.fjl.ssm.dao.ItemMapper;\nimport pers.fjl.ssm.pojo.Item;\nimport pers.fjl.ssm.service.ItemService;\n\n@Service\n@Transactional\npublic class ItemServiceImpl implements ItemService {\n    @Autowired\n    private ItemMapper itemMapper;\n\n    public Item findById(int id) {\n        return itemMapper.findById(id);\n    }\n}\n```\n### 2.5 spring配置文件applicationContext-dao.xml\n配置数据库连接的信息，扫描器，一起sqlSessionFactoryBean。\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n			    http://www.springframework.org/schema/beans/spring-beans.xsd\n			    http://www.springframework.org/schema/context\n			    http://www.springframework.org/schema/context/spring-context.xsd\n			    http://www.springframework.org/schema/aop\n			    http://www.springframework.org/schema/aop/spring-aop.xsd\n			    http://www.springframework.org/schema/tx\n			    http://www.springframework.org/schema/tx/spring-tx.xsd\n			    http://www.springframework.org/schema/mvc\n			    http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n<!--    配置数据源信息-->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/ssm\"/>\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"\"/>\n    </bean>\n\n<!--    配置spring整合mybatis框架的SqlSessionFactoryBean-->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n<!--        扫描pojo包，为实体类创建别名-->\n        <property name=\"typeAliasesPackage\" value=\"pers.fjl.ssm.pojo\"/>\n    </bean>\n\n<!--    mapper扫描器，用于产生代理对象-->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"pers.fjl.ssm.dao\"/>\n    </bean>\n\n</beans>\n```\n\n### 2.6 spring配置文件applicationContext-service.xml\n配置扫描组件扫描service层所在的包，以及事务管理器。\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n			    http://www.springframework.org/schema/beans/spring-beans.xsd\n			    http://www.springframework.org/schema/context\n			    http://www.springframework.org/schema/context/spring-context.xsd\n			    http://www.springframework.org/schema/aop\n			    http://www.springframework.org/schema/aop/spring-aop.xsd\n			    http://www.springframework.org/schema/tx\n			    http://www.springframework.org/schema/tx/spring-tx.xsd\n			    http://www.springframework.org/schema/mvc\n			    http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n<!--    配置扫描器扫描service-->\n    <context:component-scan base-package=\"pers.fjl.ssm.service\"/>\n\n<!--    事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n<!--    事务注解驱动-->\n    <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n\n</beans>\n```\n\n## 3.加入springmvc相关配置\n第三节主要配置web层和controller层，采用SpringMVC框架完成jsp页面与控制层的交互。\n### 3.1 控制层Controller \n控制层只需加上注解，再把Service从dao中封装好的Item对象添加到域中即可，由于已经配置好了前缀和后缀的视图解析器（3.2中配置），所以只需返回jsp页面的字符串即可。\n```java\npackage pers.fjl.ssm.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport pers.fjl.ssm.pojo.Item;\nimport pers.fjl.ssm.service.ItemService;\n\n@Controller\n@RequestMapping(\"/item\")\npublic class ItemController {\n    @Autowired\n    private ItemService itemService;\n\n    @RequestMapping(\"/showItem/{id}\")   //练习从访问的url取出id\n    public String findById(@PathVariable(\"id\") int id, Model model){\n        Item item = itemService.findById(id);\n        model.addAttribute(\"item\",item);\n        return \"item\";\n    }\n\n}\n\n```\n\n### 3.2 springmvc.xml文件编写\n\n```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n			    http://www.springframework.org/schema/beans/spring-beans.xsd\n			    http://www.springframework.org/schema/context\n			    http://www.springframework.org/schema/context/spring-context.xsd\n			    http://www.springframework.org/schema/aop\n			    http://www.springframework.org/schema/aop/spring-aop.xsd\n			    http://www.springframework.org/schema/tx\n			    http://www.springframework.org/schema/tx/spring-tx.xsd\n			    http://www.springframework.org/schema/mvc\n			    http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n<!--    配置扫描器,扫描Controller-->\n    <context:component-scan base-package=\"pers.fjl.ssm.controller\"/>\n\n<!--    视图解析器-->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"></property>\n        <property name=\"suffix\" value=\".jsp\"></property>\n    </bean>\n\n</beans>\n```\n\n### 3.3 jsp页面编写\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200923183731447.png#pic_center)\n\n```java\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" isELIgnored=\"false\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n    ${item}\n</body>\n</html>\n\n```\n取出controller放在域中的对象item即可<br>\n### 3.4 配置web.xml\n\n```java\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n  <display-name>Archetype Created Web Application</display-name>\n\n<!--  指定spring配置文件位置-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath:applicationContext*.xml</param-value>\n  </context-param>\n\n<!--  配置spring框架启动时使用的监听器-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n\n<!--  springmvc的前端控制器-->\n  <servlet>\n    <servlet-name>springmvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n<!--    指定SpringMVC配置文件位置-->\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:springmvc.xml</param-value>\n    </init-param>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>springmvc</servlet-name>\n    <url-pattern>*.do</url-pattern>\n  </servlet-mapping>\n\n</web-app>\n\n```\n最后一步，只需在web.xml获取配置文件位置、配置前端控制器以及监听器便大功告成，接下来启动Tomcat部署项目并测试。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200923184558269.png#pic_center)\n\n\n\n\n', '2020-08-01 11:17:39', 'https://unsplash.it/800/450?image=348', '发布', '0', '0', '1', '转载', null, '21', '8', '基于maven构建一个简单SSM工程案例，简单完成了一个spring+springmvc+mybatis工程的搭建以及部署运行', '0', '1');
INSERT INTO `blog` VALUES ('1356935614018834433', '入站须知！！', '1354747628447477762', '(入站须知)\n# 一.个人博客简介\n项目地址：http://39.108.136.207 （源码地址在本文末尾）\n## 1.1 页面展示：\n### &ensp;1.1.1 首页\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210205213646404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160225997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n### &ensp;1.1.2 分类页\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021021016025212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.3 分类页\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160322695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.4 归档页\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160345968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160408674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.5 友链页\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160507435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160625660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.6 关于我\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160745369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.7 留言页面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210160955636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.8 登录页面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210205214023858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.9 博客详情页面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210203202136515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210203202014905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210205214310257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n#### &ensp;1.1.9.1 发布博客页面\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210203201455308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n### &ensp;1.1.10 后台管理页面\n&ensp;初步完成了分页展示的功能，其余几个页面结构相似，在此不做展示。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210165006799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n\n## 1.2 功能介绍：\n&ensp;本博客简单实现了博客展示、后台管理、发布博客还有评论等功能，其中后台管理、发布博客和评论功能要在用户登录后才可使用，而后台管理功能目前普通用户只有查看的功能，并没有分配增删改的权限。\n## 1.3 博客介绍\n&ensp;由于博客是由博主一人完成的，所以暂且只做了一些简单的功能，部分地方还是有不完善的地方甚至有bug，欢迎各位在本篇博文下评论处指出。\n\n## 1.4 Tips\n### &ensp;1.4.1 \n&ensp;编写博客的markdown编辑器在文章过长时，编写栏和预览栏可能会有错位，此时可手动拉动预览栏滚动条）\n### &ensp;1.4.2 \n&ensp;暂未设置图片上传功能，涉及图片的上传和使用建议使用网络地址。推荐的图片地址（https://picsum.photos/images#1），使用的时候，将右侧链接的(https://unsplash.it/100/100?image=1002) ***1002*** 改成自己的图片id即可，100/100是图片的尺寸，即长宽。\n### &ensp;1.4.3\n &ensp;前端的请求没有用baseURL封装到一个js里 \n# 二.前端开发：\n## 2.1 简介：\n&ensp;***https://gitee.com/fang-jiale/blog-vue***（前端源码地址）\n&ensp;采用了vue.js，前端框架采用了semantic-ui和element-ui，此外还有一些关于页面动态和渲染的js和css类似(animate.css,pricsm等)。此外，需要说明的是，本人后端狗一枚，页面样式是基于网上部分模板样式的修改，其余开发是独立完成的。\n## 2.2 项目介绍\n&ensp;项目结构采用的是vue-cli3，值得一提的是其中用到的插件还是不错的。\n\n[编辑器 Markdown](https://pandao.github.io/editor.md/)\n\n[内容排版 typo.css](https://github.com/sofish/typo.css)\n\n[动画 animate.css](https://daneden.github.io/animate.css/)\n\n[代码高亮 prism](https://github.com/PrismJS/prism)\n\n[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)\n\n[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)\n\n[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)\n\n[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)\n\n[弹幕效果 vue-baberrage](https://blog.csdn.net/Dlihctcefrep/article/details/113773737)\n\n[背景的彩带效果 ribbon](https://gitee.com/aaajkcn/ribbon)\n\n# 三.后端开发：\n## 3.1 简介：\n&ensp;***https://gitee.com/fang-jiale/blog***（后端源码地址）\n>- 大致框架采用了SpringBoot+MybatisPlus+SpringCloud(Eureka)完成的，用redis做缓存中间件，采用微服务的架构。\n>- 安全方面采用了SpringSecurity和BCEncrypt\n>- 用了jwt来请求访问接口\n>- 利用RSA算法对前端发送的重要参数进行加密，经过网关解密后把参数发送到后端服务器。\n\n\n## 3.2 项目结构：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210210175739859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n>项目是由五个模块组成的，\n>- blog-common: 博客服务端的实体类\n>- blog-encrypt: 博客的服务代理类（从前端接收请求，网关RSA解密后转发给服务端接口）\n> - blog-eureka: 微服务注册中心server\n> - blog-server: 主体服务端\n> - blog-extension: 拓展服务端（留言和友链功能）\n\n\n\n>&ensp;如果这篇文章对你有帮助，麻烦点个赞，并star一下仓库，有问题请在评论处指出。\n', '2021-02-03 20:00:35', 'https://unsplash.it/800/450?image=765', '发布', '0', '0', '1', '原创', null, '542', '2', '如何获取源码地址？入站有什么注意事项？进来便知！', '1', '1');
INSERT INTO `blog` VALUES ('1365952371696091138', 'SpringCloud的学习笔记（Eureka、Ribbon、Feign、Hystrix、Zuul）', '1354747628447477762', '@[TOC](目录)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210226110040927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n# 1. 微服务\n```mermaid\ngraph LR;\n1[集中式架构] --> 2[垂直拆分]\n2 --> 3[ 分布式服务]\n3 --> 4[SOA面向服务架构]\n4 --> 5[微服务架构]\n```\n\n**微服务架构**：是一套使用小服务或者单一业务来开发单个应用的方式或途径。\n\n微服务架构特点：\n\n- 单一职责\n- 服务粒度小\n- 面向服务（对外暴露REST api）\n- 服务之间相互独立\n\n与使用ESB的SOA架构的区别：微服务架构没有使用ESB，有服务治理注册中心；业务粒度小。\n\n# 2. Spring Cloud概述\n\n**目标**：Spring Cloud整合的组件和版本特征\n\n**小结**：\n\n- 整合的组件可以有很多组件；常见的组件有：eureka注册中心，Gateway网关，Ribbon负载均衡，Feign服务调用，Hystrix熔断器。在有需要的时候项目添加对于的启动器依赖即可。\n- 版本特征：以英文单词命名（伦敦地铁站名）\n\n## 2.1 初识Spring Cloud\n微服务是一种架构方式，最终肯定需要技术架构去实施。\n微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？\n- 后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。\n- 技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了\n- 群众基础好：可以说大多数程序员的成长都伴随着Spring框架，试问：现在有几家公司开发不用Spring？\n- Spring Cloud与Spring的各个框架无缝整合，对大家来说一切都是熟悉的配方，熟悉的味道。\n- 使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而Spring Cloud完全支持Spring Boot的开发，用很少的配置就能完成微服务框架的搭建\n## 2.2 简介\n> &emsp;Spring Cloud是Spring旗下的项目之一，官网地址：http://projects.spring.io/spring-cloud/ Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。\n&emsp;Spring Cloud也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等功能；协调分布式环境中各个系统，为各类服务提供模板性配置。其主要\n涉及的组件包括：\n>- Eureka：注册中心\n>- Zuul、Gateway：服务网关\n>- Ribbon：负载均衡\n>- Feign：服务调用\n>- Hystrix或Resilience4j：熔断器\n\n以上只是其中一部分，架构图：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210222113426347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210222192213679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/202102221922553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n**可见SpringCloud不单单只是一个框架，而是一个生态，里面包含了各种各样的技术栈。** 是将目前各家公司开发比较成熟的服务框架组合起来，通过SpringBoot风格再进行封装，屏蔽掉了复杂的配置和实现原理，**最终给开发者留出了一套简单易懂，易部署和易维护的分布式系统开发工具包**\n\n## 2.3 Eureka\nEureka的主要功能是进行服务管理，定期检查服务状态，返回服务地址列表。是一个服务的注册中心，用户可以按需将微服务注册到EurekaServer中。\n**server↓**\n```java\nserver:\n  port: 7001\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false  # 不注册自己\n    fetch-registry: false # false则自己是注册中心\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n\n```\n运行后，可以看到的是服务注册中心注册的一些实例\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210223093241706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n- 自我保护机制：某时刻一个微服务如果不可用，eureka不会立刻清理，依旧会对该微服务的信息进行保存。\n\n### 2.3.1 简单的集群搭建\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210223102040346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n> 搭建了三个EurekaServer，然后像另外两个服务结点挂载自己，由于没有多个机器，所以只能采用localhost，下方是其中一个服务结点的配置，然后client结点的话则要发布到三个服务结点（7001、7002、7003）\n\n```java\nserver:\n  port: 7001\neureka:\n  instance:\n    hostname: localhost\n  client:\n    register-with-eureka: false  # 不注册自己\n    fetch-registry: false # false则自己是注册中心\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:7002/eureka/,http://${eureka.instance.hostname}:7003/eureka/\n\n```\n\n```java\nserver:\n  port: 8001\nspring:\n  application:\n    name: springcloud-provider-dept\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/db1?userUnicode=true&characterEncoding=utf-8\n    username: root\n    password: 123456\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:7001/eureka/,http://localhost:7002/eureka/,http://localhost:7003/eureka/\n  instance:\n    instance-id: springcloud-provider-dept8001\nmybatis-plus:\n  type-aliases-package: pers.fjl.springcloud.pojo\n  mapper-locations: classpath:mybatis/mapper/*.xml\n```\n### 2.3.2 Eureka与Zookeeper\n> CAP理论\n>- C：强一致性\n>- A：可用性\n>- P：分区容错性（必须的）\n- Zookeeper保证的是CP，可以容忍注册中心返回的是几分钟前的注册信息，但不能接收服务直接挂掉，主节点挂了以后其余节点要重新选取主节点，此时服务就不可用。\n- Eureka保证的是AP，每个节点都是平等的，几个点挂掉不会影响正常节点的工作，剩余节点依然提供注册和查询服务，只不过查到的数据可能并不是最新的。\n\n# 3.Ribbon\n## 3.1 Ribbon简介\n**目标**：描述负载均衡和ribbon的作用\n\n**分析**：\n\n负载均衡是一个算法，可以通过该算法实现从地址列表中获取一个地址进行服务调用。\n\n在Spring Cloud中提供了负载均衡器：Ribbon\n\n**小结**：\n\nRibbon提供了轮询、随机两种负载均衡算法（默认是轮询）可以实现从地址列表中使用负载均衡算法获取地址进行服务调用。\n> 直白地讲就是将用户请求平摊的分配到多个服务上，从而达到系统高可用。\n\n# 3.2 实战使用Ribbon轮询调度服务\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224100507129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n> - 7001-7003是三个eureka的服务端结点做的集群\n> - 9001是服务的消费方，只有控制层\n> - 8001-8002是服务的提供方，负责提供服务，查询数据库返回数据给9001的接口\n\n可以知道的是，8001-8002作为服务的提供方，连接着不同的数据库，当客户调度9001消费方时，**此时ribbon就起了作用，因为是其决定是由端口8001的模块还是端口为8002的模块提供服务。**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224101911851.png)\n\n\n```java\npackage pers.fjl.springcloud;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\nimport javax.annotation.Resource;\n\n@RestController\npublic class TestController {	//9001消费方控制器\n    @Resource\n    private RestTemplate restTemplate;\n\n    private static final String REST_URL_PREFIX = \"http://SPRINGCLOUD-PROVIDER-DEPT\";\n\n    @GetMapping(\"/consumer/test1\")\n    public Object test1() {\n        return restTemplate.getForObject(REST_URL_PREFIX + \"/test1\", Object.class);\n    }\n}\n\n```\n此时因为不确定提供服务模块的端口，所以url路径也不能写死，应该写成是其在eureka中注册的实例名称\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224101244339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n然后，再将注册的Bean上面加上一个@LoadBalanced注解即可\n\n```java\npackage pers.fjl.springcloud.config;\n\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class ConfigBean {\n    // 配置负载均衡实现RestTemplate\n    //\n    @Bean\n    @LoadBalanced\n    public RestTemplate getRestTemplate(){\n        return new RestTemplate();\n    }\n}\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224101502186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n- 两个数据库中存着同样的表，不同的是，db_source存放着的是当前数据的名称（更直观的看Ribbon的调度方式）\n\n此时我们向消费方的控制层发送请求，http://localhost:9001/consumer/test1，**发现Ribbon默认的是轮询方式，** 即轮流调度服务提供方。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224101707124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224101718828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n## 3.3 重写Ribbon负载均衡算法\n点进去RandomRule算法查看源码，发现也是从或者的结点列表中，通过随机数来取出list中的结点，然后再对其判断是否存活后返回结点，此时我们就可以根据这一点来配置我们自己的负载均衡算法。\n\n```java\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage com.netflix.loadbalancer;\n\nimport com.netflix.client.config.IClientConfig;\nimport edu.umd.cs.findbugs.annotations.SuppressWarnings;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class RandomRule extends AbstractLoadBalancerRule {\n    public RandomRule() {\n    }\n\n    @SuppressWarnings({\"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE\"})\n    public Server choose(ILoadBalancer lb, Object key) {\n        if (lb == null) {\n            return null;\n        } else {\n            Server server = null;\n\n            while(server == null) {\n                if (Thread.interrupted()) {\n                    return null;\n                }\n\n                List<Server> upList = lb.getReachableServers();\n                List<Server> allList = lb.getAllServers();\n                int serverCount = allList.size();\n                if (serverCount == 0) {\n                    return null;\n                }\n\n                int index = this.chooseRandomInt(serverCount);\n                server = (Server)upList.get(index);\n                if (server == null) {\n                    Thread.yield();\n                } else {\n                    if (server.isAlive()) {\n                        return server;\n                    }\n\n                    server = null;\n                    Thread.yield();\n                }\n            }\n\n            return server;\n        }\n    }\n\n    protected int chooseRandomInt(int serverCount) {\n        return ThreadLocalRandom.current().nextInt(serverCount);\n    }\n\n    public Server choose(Object key) {\n        return this.choose(this.getLoadBalancer(), key);\n    }\n\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n    }\n}\n\n```\n>- 首先在另外一个包的类中配置bean（不要在springboot启动类同级或者同级的包之下，否则无论自定义是否使用都会被扫描到默认为使用）\n>- 其次，配置类中要进行定义。\n>\n\n```java\npackage pers.fjl.myrule;\n\nimport com.netflix.loadbalancer.IRule;\nimport com.netflix.loadbalancer.RandomRule;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FRule {\n    @Bean\n    public IRule myRule(){\n        return new MyRandomRule();\n    }\n\n}\n\n```\n>接下来就是重写RandomRule()方法，笔者在两个等号之间重写了方法，即每个结点循环调度五次后，切换到下一个结点，其余内容不变即可。\n\n```java\npackage pers.fjl.myrule;\n\nimport com.netflix.client.config.IClientConfig;\nimport com.netflix.loadbalancer.AbstractLoadBalancerRule;\nimport com.netflix.loadbalancer.ILoadBalancer;\nimport com.netflix.loadbalancer.Server;\n\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class MyRandomRule extends AbstractLoadBalancerRule {\n\n    private int total = 0;  // 被调用的次数\n    private int currentIndex = 0;   //当前是谁在提供服务\n\n    @SuppressWarnings({\"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE\"})\n    public Server choose(ILoadBalancer lb, Object key) {\n        if (lb == null) {\n            return null;\n        } else {\n            Server server = null;\n\n            while (server == null) {\n                if (Thread.interrupted()) {\n                    return null;\n                }\n\n                List<Server> upList = lb.getReachableServers();\n                List<Server> allList = lb.getAllServers();\n                int serverCount = allList.size();\n                if (serverCount == 0) {\n                    return null;\n                }\n\n//                int index = this.chooseRandomInt(serverCount);  // 生成区间随机数\n//                server = (Server)upList.get(index);\n                //========================================================\n                if (total < 5) {\n                    server = upList.get(currentIndex);\n                    total++;\n                } else {\n                    total = 0;\n                    currentIndex++;\n                    if (currentIndex >= upList.size()) {\n                        currentIndex = 0;\n                    }\n                    server = upList.get(currentIndex);\n                }\n                //========================================================\n\n                if (server == null) {\n                    Thread.yield();\n                } else {\n                    if (server.isAlive()) {\n                        return server;\n                    }\n\n                    server = null;\n                    Thread.yield();\n                }\n            }\n\n            return server;\n        }\n    }\n\n    protected int chooseRandomInt(int serverCount) {\n        return ThreadLocalRandom.current().nextInt(serverCount);\n    }\n\n    public Server choose(Object key) {\n        return this.choose(this.getLoadBalancer(), key);\n    }\n\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n    }\n}\n\n```\n启动测试，发现确实是每个结点调用五次以后才会变换，自此大功告成。\n\n# 4.Feign：负载均衡(基于服务端)\n## 4.1 Feign简介\n> &emsp; Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端\n只需要创建一个接口，然后添加注解即可~\n &emsp;Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法\n\n- 微服务名字 【ribbon】\n- 接口和注解 【feign】\n## 4.2 Feign能干什么？\n>Feign旨在使编写Java Http客户端变得更容易\n>- 前面在使用Ribbon + RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。\n**Feign默认集成了Ribbon**\n\n>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。\n\n使用了Feign以后，代码更面向接口实现，直接加注解来配置对应的服务名，即不用restTemplate，但是缺点是要多写一层来实现。\n\n```java\npackage pers.fjl.springcloud.service;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport pers.fjl.springcloud.pojo.Dept;\n\nimport java.util.List;\n\n@FeignClient(value = \"SPRINGCLOUD-PROVIDER-DEPT\")\npublic interface DeptClientService {\n	\n	// 相当于调用服务提供方的controller接口\n    @GetMapping(\"/test1\")\n    public List<Dept> queryAll();\n\n}\n```\n消费方控制层如下\n```java\npackage pers.fjl.springcloud;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\nimport pers.fjl.springcloud.pojo.Dept;\nimport pers.fjl.springcloud.service.DeptClientService;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n@RestController\npublic class FeignController {\n//    @Resource\n//    private RestTemplate restTemplate;\n\n//    private static final String REST_URL_PREFIX = \"http://SPRINGCLOUD-PROVIDER-DEPT\";\n\n    // 用了feign就不用写死的\n    @Resource\n    public DeptClientService service = null;\n\n    @GetMapping(\"/consumer/test1\")\n    public List<Dept> test1() {\n        return this.service.queryAll();\n    }\n}\n\n```\n# 5. Hystrix：服务熔断\n>分布式系统面临的问题：\n**复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！**\n\n## 5.1 服务雪崩\n>​ 多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长，或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224202304407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n如果调度顺序是A、P、H、I，如果中间的服务崩了，那整个调度都是失败的。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224202432232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n&emsp;对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行。**所以​我们需要，弃车保帅！**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224202955805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n## 5.2 什么是Hystrix？\n​ &emsp; Hystrix是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。\n\n​ &emsp; ​ “断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。\n\n## 5.3服务熔断\n- 什么是服务熔断?\n**​ 熔断机制是赌赢雪崩效应的一种微服务链路保护机制。**\n>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，**当失败的调用到一定阀值缺省是5秒内20次调用失败**，就会启动熔断机制。熔断机制的注解是：@HystrixCommand。\n\n>服务熔断解决如下问题：\n>- 当所依赖的对象不稳定时，能够起到快速失败的目的；\n>- 快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。\n>\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224203505823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224203335533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n## 5.4 熔断实战\n在启动类加上@EnableCircuitBreaker即可启动熔断服务，加了@HystrixCommand注解后，会在服务不可用时回调到你写的备用方法。\n\n```java\npackage pers.fjl.springcloud;\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\nimport pers.fjl.springcloud.pojo.Dept;\n\nimport javax.annotation.Resource;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\npublic class TestController {\n    @Resource\n    private TestDao testDao;\n    private int total = 0;\n\n    @GetMapping(\"/test1\")\n    @HystrixCommand(fallbackMethod = \"hystrixGet\")\n    public List<Dept> test1() {\n        total++;\n        if (total % 2 == 0) {\n            throw new RuntimeException(\"服务熔断\");\n        } else {\n            return testDao.selectList(null);\n        }\n    }\n\n    //  备用方法\n    public List<Dept> hystrixGet() {\n        List<Dept> deptList = new ArrayList<>();\n        deptList.add(new Dept().setDbSource(\"no this database\").setDName(\"这是一个Hystrix演示！\"));\n        return deptList;\n    }\n}\n\n```\n## 5.5 服务降级\n>**什么是服务降级?**\n​  服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，就是尽可能的把系统资源让给优先级高的服务。\n&emsp;资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。\n&emsp;服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。\n&emsp;降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224214333159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n\n由上图可得，当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级。**这就是为什么双十一淘宝不能退款的缘故？**\n\n> 服务降级需要考虑的问题\n1）哪些服务是核心服务，哪些服务是非核心服务\n2）哪些服务可以支持降级，哪些服务不能支持降级，降级策略是什么\n3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？\n自动降级分类\n>- 超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况\n>- 失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况\n>- 故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）\n>- 限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。\n\n## 5.6 Dashboard监控\n在需要添加监控的服务提供者的启动类配置\n```java\npackage pers.fjl.springcloud;\n\nimport com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.context.annotation.Bean;\n\n@EnableEurekaClient\n@SpringBootApplication\n@EnableDiscoveryClient\n@MapperScan(\"pers.fjl.springcloud\")\n@EnableCircuitBreaker   // 添加对熔断的支持\npublic class DeptHystrix_8001 {\n    public static void main(String[] args) {\n        SpringApplication.run(DeptHystrix_8001.class, args);\n    }\n\n    // 增加servlet监控\n    @Bean\n    public ServletRegistrationBean hystrixMetricsStreamServlet() {\n        ServletRegistrationBean registrationBean = new ServletRegistrationBean(new HystrixMetricsStreamServlet());\n        registrationBean.addUrlMappings(\"/actuator/hystrix.stream\");\n        return registrationBean;\n    }\n}\n\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021022509340265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n\n# 6. Zuul：路由网关\n> &emsp;Zull包含了对请求的路由(用来跳转的)和过滤两个最主要功能：\n​ &emsp;其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。\n\n```java\nserver:\n  port: 9527\nspring:\n  application:\n    name: springcloud-zuul\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:7001/eureka/,http://localhost:7002/eureka/,http://localhost:7003/eureka/\n  instance:\n    instance-id: springcloud-zuul-9527\n    prefer-ip-address: true\ninfo:\n  app.name: fjl-spring-cloud\n  company.naeme: roses_are_rosie\nzuul:\n  routes:\n    mydept.serviceId: springcloud-provider-dept\n    mydept.path: /mydept/**\n  ignored-services: springcloud-provider-dept # 不能使用该路径访问 隐藏微服务\n\n```\n\n# 7 Spring Cloud Config 分布式配置\n> &emsp;Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring Environment和PropertySource抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用Spring配置将其插入。\n\n\n**分布式系统面临的–配置文件问题**\n\n&emsp;微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud提供了configServer来解决这个问题，我们每一个微服务自己带着一个application.yml，那上百个的配置文件修改起来，令人头疼！\n\n什么是SpringCloud config分布式配置中心？\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210225212526148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RsaWhjdGNlZnJlcA==,size_16,color_FFFFFF,t_70)\n​ spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个中心化的外部配置。\n>  spring cloud config 分为服务端和客户端两部分。\n>- ​服务端也称为 分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。\n>- 客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。\n\nspring cloud config 分布式配置中心能干嘛？\n\n>- 集中式管理配置文件\n>- 不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release\n>- 运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息\n>- 当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置\n>- 将配置信息以REST接口的形式暴露\nspring cloud config 分布式配置中心与GitHub整合\n\n​ 由于spring cloud config 默认使用git来存储配置文件 (也有其他方式，比如自持SVN 和本地文件)，但是最推荐的还是git ，而且使用的是 http / https 访问的形式。\n\n', '2021-02-28 17:09:58', 'https://unsplash.it/800/450?image=958', '发布', '0', '0', '1', '原创', null, '203', '6', 'SpringCloud的学习笔记（Eureka、Ribbon、Feign、Hystrix、Zuul）', '0', '1');

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag` (
  `blog_id` bigint(20) NOT NULL,
  `tag_id` bigint(20) NOT NULL,
  PRIMARY KEY (`blog_id`,`tag_id`),
  KEY `tag_id` (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES ('1354971607569526785', '1');
INSERT INTO `blog_tag` VALUES ('1354977782910414850', '1');
INSERT INTO `blog_tag` VALUES ('1355150991559442433', '1');
INSERT INTO `blog_tag` VALUES ('1355697631751966722', '1');
INSERT INTO `blog_tag` VALUES ('1356075450692730882', '1');
INSERT INTO `blog_tag` VALUES ('1356077342923620353', '1');
INSERT INTO `blog_tag` VALUES ('1356079071975112705', '1');
INSERT INTO `blog_tag` VALUES ('1356935614018834433', '1');
INSERT INTO `blog_tag` VALUES ('1365952371696091138', '1');
INSERT INTO `blog_tag` VALUES ('1391383448102436866', '1');
INSERT INTO `blog_tag` VALUES ('2', '2');
INSERT INTO `blog_tag` VALUES ('3', '3');

-- ----------------------------
-- Table structure for chat_log
-- ----------------------------
DROP TABLE IF EXISTS `chat_log`;
CREATE TABLE `chat_log` (
  `msg_id` bigint(20) NOT NULL COMMENT '''消息id''',
  `sender` bigint(20) NOT NULL,
  `receiver` bigint(20) NOT NULL,
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '''发送消息的时间''',
  `content` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '''消息内容''',
  PRIMARY KEY (`msg_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- ----------------------------
-- Records of chat_log
-- ----------------------------
INSERT INTO `chat_log` VALUES ('1381614860244119553', '1354330782506385410', '1354747628447477762', '2021-04-12 22:27:06', '我是rosie');
INSERT INTO `chat_log` VALUES ('1381615036694294529', '1354330782506385410', '1354747628447477762', '2021-04-12 22:27:48', '请问你是谁');
INSERT INTO `chat_log` VALUES ('1381615095888506881', '1354747628447477762', '1354330782506385410', '2021-04-12 22:28:02', '我是tcefrep，你好啊');
INSERT INTO `chat_log` VALUES ('1381788419969040385', '1354330782506385410', '1354747628447477762', '2021-04-13 09:56:46', '我觉得今天天气不错，rosie你觉得呢');
INSERT INTO `chat_log` VALUES ('1381788526714077186', '1354747628447477762', '1354330782506385410', '2021-04-13 09:57:11', '我是tcefrep你搞错了');
INSERT INTO `chat_log` VALUES ('1381844678189637633', '1354747628447477762', '1355863116267323393', '2021-04-13 13:40:19', '我想说够十三个字然后来测试');
INSERT INTO `chat_log` VALUES ('1381845506644369410', '1354330782506385410', '1354747628447477762', '2021-04-13 13:43:36', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1381998210205143041', '1354747628447477762', '1354330782506385410', '2021-04-13 23:50:24', '23 50');
INSERT INTO `chat_log` VALUES ('1382231911304306689', '1354330782506385410', '1354747628447477762', '2021-04-14 15:19:02', '无语');
INSERT INTO `chat_log` VALUES ('1382294868994301954', '1354330782506385410', '1354747628447477762', '2021-04-14 19:29:13', '阿萨德');
INSERT INTO `chat_log` VALUES ('1382365892825849858', '1354747628447477762', '1354330782506385410', '2021-04-15 00:11:26', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1382367251520299009', '1354330782506385410', '1354747628447477762', '2021-04-15 00:16:50', '安装');
INSERT INTO `chat_log` VALUES ('1382367350677839873', '1354330782506385410', '1354747628447477762', '2021-04-15 00:17:14', '搞笑？');
INSERT INTO `chat_log` VALUES ('1382500230129311745', '1354747628447477762', '1354330782506385410', '2021-04-15 09:05:15', '请输入要发送的消息?');
INSERT INTO `chat_log` VALUES ('1382502641065582593', '1354330782506385410', '1354747628447477762', '2021-04-15 09:14:49', '我发一个私聊给你');
INSERT INTO `chat_log` VALUES ('1382502679728676865', '1354330782506385410', '1354747628447477762', '2021-04-15 09:14:59', '安装');
INSERT INTO `chat_log` VALUES ('1382502715183128577', '1354330782506385410', '1354747628447477762', '2021-04-15 09:15:07', '啊。。');
INSERT INTO `chat_log` VALUES ('1382504294376333314', '1354747628447477762', '1355863116267323393', '2021-04-15 09:21:24', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1382504348340248577', '1354747628447477762', '1355863116267323393', '2021-04-15 09:21:37', 'jennie你好');
INSERT INTO `chat_log` VALUES ('1382504447871082497', '1354747628447477762', '1354330782506385410', '2021-04-15 09:22:00', '朴彩英啊');
INSERT INTO `chat_log` VALUES ('1382504519954391041', '1354330782506385410', '1354747628447477762', '2021-04-15 09:22:17', '1');
INSERT INTO `chat_log` VALUES ('1382504677383397378', '1354330782506385410', '1355863116267323393', '2021-04-15 09:22:55', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1382504770962513922', '1355863116267323393', '1354330782506385410', '2021-04-15 09:23:17', '请输你好');
INSERT INTO `chat_log` VALUES ('1382504835093422082', '1355863116267323393', '1354330782506385410', '2021-04-15 09:23:33', '3');
INSERT INTO `chat_log` VALUES ('1382505333104107522', '1355863116267323393', '1354747628447477762', '2021-04-15 09:25:31', 'w');
INSERT INTO `chat_log` VALUES ('1382505422551834625', '1355863116267323393', '1354330782506385410', '2021-04-15 09:25:53', '3');
INSERT INTO `chat_log` VALUES ('1382505449286328321', '1355863116267323393', '1354330782506385410', '2021-04-15 09:25:59', '5');
INSERT INTO `chat_log` VALUES ('1382505490579251202', '1354747628447477762', '1354330782506385410', '2021-04-15 09:26:09', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1382506517034491905', '1354747628447477762', '1354330782506385410', '2021-04-15 09:30:14', '请输入要发送的消息');
INSERT INTO `chat_log` VALUES ('1382508318425145346', '1354330782506385410', '1354747628447477762', '2021-04-15 09:37:23', '私聊');
INSERT INTO `chat_log` VALUES ('1382508387085901825', '1354330782506385410', '1354747628447477762', '2021-04-15 09:37:39', '跟你私聊');
INSERT INTO `chat_log` VALUES ('1382508410125213698', '1354330782506385410', '1354747628447477762', '2021-04-15 09:37:45', '阿这');
INSERT INTO `chat_log` VALUES ('1382508828112773121', '1354330782506385410', '1354747628447477762', '2021-04-15 09:39:25', '是');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `comment_id` bigint(20) NOT NULL,
  `uid` bigint(20) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL COMMENT '评论内容',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `blog_id` bigint(20) DEFAULT NULL,
  `parent_comment_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1355503370591002626', '84351321231233', '这篇文章写得不错', '2021-02-01 07:40:54', '1354977782910414850', '-1');
INSERT INTO `comment` VALUES ('1356024803230408705', '1354330782506385410', '我也是这样觉得', '2021-02-01 07:41:21', '1354977782910414850', '1355503370591002626');
INSERT INTO `comment` VALUES ('1356025191316774913', '1354747628447477762', '你们都是水军吧？\n', '2021-02-01 07:42:54', '1354977782910414850', '1356024803230408705');
INSERT INTO `comment` VALUES ('1356025232655835137', '1354747628447477762', 'abc', '2021-02-01 07:43:03', '1354977782910414850', '-1');
INSERT INTO `comment` VALUES ('1356026786398052354', '1356025819581571074', '所以本站搜索也用的是elasticSearch实现的？', '2021-02-01 07:49:14', '1354977782910414850', '-1');
INSERT INTO `comment` VALUES ('1362737896589291521', '1354330782506385410', '我来留个言', '2021-02-19 20:16:47', '1356935614018834433', '-1');
INSERT INTO `comment` VALUES ('1362778978320621570', '1354330782506385410', '...', '2021-02-19 23:00:02', '1356935614018834433', '1362737896589291521');
INSERT INTO `comment` VALUES ('1362779118590730242', '1354330782506385410', 'maybe', '2021-02-19 23:00:35', '1354977782910414850', '1356026786398052354');
INSERT INTO `comment` VALUES ('1362965976704557057', '1354747628447477762', '所以你想说啥', '2021-02-15 11:23:06', '1356935614018834433', '1362778978320621570');

-- ----------------------------
-- Table structure for friends
-- ----------------------------
DROP TABLE IF EXISTS `friends`;
CREATE TABLE `friends` (
  `uid` bigint(20) NOT NULL COMMENT '''用户本人的id''',
  `friend_id` bigint(20) NOT NULL COMMENT '''拥有的朋友的id''',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '''添加好友的时间''',
  PRIMARY KEY (`uid`,`friend_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of friends
-- ----------------------------
INSERT INTO `friends` VALUES ('84351321231233', '1354747628447477762', '2021-04-13 17:42:42');
INSERT INTO `friends` VALUES ('65456132132133155', '1354747628447477762', '2021-04-13 17:19:51');
INSERT INTO `friends` VALUES ('1354330782506385410', '1354747628447477762', '2021-04-12 20:08:13');
INSERT INTO `friends` VALUES ('1354330782506385410', '1355863116267323393', '2021-04-15 09:22:28');
INSERT INTO `friends` VALUES ('1354747628447477762', '84351321231233', '2021-04-13 17:42:42');
INSERT INTO `friends` VALUES ('1354747628447477762', '65456132132133155', '2021-04-13 17:19:51');
INSERT INTO `friends` VALUES ('1354747628447477762', '1354330782506385410', '2021-04-12 20:07:48');
INSERT INTO `friends` VALUES ('1354747628447477762', '1355863116267323393', '2021-04-12 20:13:01');
INSERT INTO `friends` VALUES ('1355863116267323393', '1354330782506385410', '2021-04-15 09:22:28');
INSERT INTO `friends` VALUES ('1355863116267323393', '1354747628447477762', '2021-04-12 20:13:10');

-- ----------------------------
-- Table structure for group_chat
-- ----------------------------
DROP TABLE IF EXISTS `group_chat`;
CREATE TABLE `group_chat` (
  `msg_id` bigint(20) NOT NULL COMMENT '消息id',
  `uid` bigint(20) NOT NULL COMMENT '用户id',
  `content` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '发送消息的时间',
  `room_id` bigint(20) NOT NULL DEFAULT '1' COMMENT '群聊id',
  PRIMARY KEY (`msg_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- ----------------------------
-- Records of group_chat
-- ----------------------------
INSERT INTO `group_chat` VALUES ('1382139979039330306', '1354747628447477762', '请输入要发送的消息', '2021-04-14 09:13:44', '1');
INSERT INTO `group_chat` VALUES ('1382140665583980546', '1354747628447477762', '额', '2021-04-14 09:16:28', '1');
INSERT INTO `group_chat` VALUES ('1382141126600904706', '1355863116267323393', 'wa', '2021-04-14 09:18:18', '1');
INSERT INTO `group_chat` VALUES ('1382176103099068417', '1354330782506385410', '请输入要发送的消息', '2021-04-14 11:37:17', '1');
INSERT INTO `group_chat` VALUES ('1382182139130322945', '1354747628447477762', '请输入要发送的消息', '2021-04-14 12:01:16', '1');
INSERT INTO `group_chat` VALUES ('1382182200467824642', '1354330782506385410', 'a', '2021-04-14 12:01:30', '1');
INSERT INTO `group_chat` VALUES ('1382182790283436034', '1354747628447477762', '请输入要发送的消息', '2021-04-14 12:03:51', '1');
INSERT INTO `group_chat` VALUES ('1382182821732327425', '1354747628447477762', 'a1', '2021-04-14 12:03:59', '1');
INSERT INTO `group_chat` VALUES ('1382231845587951617', '1354330782506385410', '请输入要发送的消息', '2021-04-14 15:18:47', '1');
INSERT INTO `group_chat` VALUES ('1382231871542304770', '1354330782506385410', '安装', '2021-04-14 15:18:53', '1');
INSERT INTO `group_chat` VALUES ('1382293371959123970', '1354747628447477762', '有人吗', '2021-04-14 19:23:16', '1');
INSERT INTO `group_chat` VALUES ('1382294668703703041', '1354330782506385410', '请输入要发送的消息', '2021-04-14 19:28:25', '1');
INSERT INTO `group_chat` VALUES ('1382366509707304962', '1354747628447477762', '群聊？', '2021-04-15 00:13:53', '1');
INSERT INTO `group_chat` VALUES ('1382502471062052866', '1354330782506385410', '群聊', '2021-04-15 09:14:09', '1');
INSERT INTO `group_chat` VALUES ('1382505564738740225', '1354747628447477762', '这是群聊', '2021-04-15 09:26:27', '1');
INSERT INTO `group_chat` VALUES ('1382506547598385154', '1354747628447477762', '3', '2021-04-15 09:30:21', '1');
INSERT INTO `group_chat` VALUES ('1382506776284422146', '1354747628447477762', '6', '2021-04-15 09:31:15', '1');
INSERT INTO `group_chat` VALUES ('1382506797377576962', '1354747628447477762', '8', '2021-04-15 09:31:20', '1');
INSERT INTO `group_chat` VALUES ('1382506817673814017', '1354747628447477762', '9', '2021-04-15 09:31:25', '1');
INSERT INTO `group_chat` VALUES ('1382506850779455489', '1354747628447477762', '8', '2021-04-15 09:31:33', '1');
INSERT INTO `group_chat` VALUES ('1382508201156599810', '1354330782506385410', '请输入要发送的消息', '2021-04-15 09:36:55', '1');
INSERT INTO `group_chat` VALUES ('1382508254961131521', '1354330782506385410', '群聊', '2021-04-15 09:37:08', '1');

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag` (
  `tag_id` bigint(20) NOT NULL,
  `tag_name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES ('1', 'Java');
INSERT INTO `tag` VALUES ('2', 'Spring');
INSERT INTO `tag` VALUES ('3', 'SpringBoot');
INSERT INTO `tag` VALUES ('4', 'Mysql');
INSERT INTO `tag` VALUES ('5', 'Vue');
INSERT INTO `tag` VALUES ('6', '前端');
INSERT INTO `tag` VALUES ('7', '后端');
INSERT INTO `tag` VALUES ('8', '大数据');
INSERT INTO `tag` VALUES ('9', '运维');

-- ----------------------------
-- Table structure for thumbs_up
-- ----------------------------
DROP TABLE IF EXISTS `thumbs_up`;
CREATE TABLE `thumbs_up` (
  `blog_id` bigint(20) NOT NULL,
  `uid` bigint(20) NOT NULL COMMENT '用户id',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '点赞时间',
  PRIMARY KEY (`blog_id`,`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of thumbs_up
-- ----------------------------
INSERT INTO `thumbs_up` VALUES ('1354977782910414850', '65456132132133155', '2021-02-21 11:31:31');
INSERT INTO `thumbs_up` VALUES ('1355150991559442433', '1354330782506385410', '2021-02-20 20:30:09');
INSERT INTO `thumbs_up` VALUES ('1355150991559442433', '1356025819581571074', '2021-02-20 21:15:51');
INSERT INTO `thumbs_up` VALUES ('1355697631751966722', '65456132132133155', '2021-02-21 11:31:40');
INSERT INTO `thumbs_up` VALUES ('1355697631751966722', '1356025819581571074', '2021-02-20 21:15:59');
INSERT INTO `thumbs_up` VALUES ('1356075450692730882', '1354330782506385410', '2021-02-21 20:50:01');
INSERT INTO `thumbs_up` VALUES ('1356077342923620353', '65456132132133155', '2021-02-21 11:31:49');

-- ----------------------------
-- Table structure for type
-- ----------------------------
DROP TABLE IF EXISTS `type`;
CREATE TABLE `type` (
  `type_id` bigint(20) NOT NULL,
  `type_name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of type
-- ----------------------------
INSERT INTO `type` VALUES ('1', '生活');
INSERT INTO `type` VALUES ('2', '科技');
INSERT INTO `type` VALUES ('3', '情感');
INSERT INTO `type` VALUES ('4', '计算机网络');
INSERT INTO `type` VALUES ('5', '数据结构');
INSERT INTO `type` VALUES ('6', '学习日志');
INSERT INTO `type` VALUES ('7', '体育');
INSERT INTO `type` VALUES ('8', '日记');
INSERT INTO `type` VALUES ('9', '操作系统');
INSERT INTO `type` VALUES ('10', 'JavaSE');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `uid` bigint(20) NOT NULL,
  `nickname` varchar(30) DEFAULT NULL,
  `username` varchar(30) DEFAULT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `last_ip` varchar(16) DEFAULT NULL COMMENT '上次登录的ip',
  `data_status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '禁用状态',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('5646123123135', '邓紫棋', 'Gem', '$2a$10$Nx4P9OxE6JCX8GOsjfTAIODAAUVFPLU8.lY4haB37sFfOrA025osC', null, 'https://unsplash.it/100/100?image=1002', '2021-01-31 09:57:57', null, null, '1');
INSERT INTO `user` VALUES ('84351321231233', 'lisa', 'lisa', '$2a$10$Nx4P9OxE6JCX8GOsjfTAIODAAUVFPLU8.lY4haB37sFfOrA025osC', null, 'https://unsplash.it/100/100?image=1052', '2021-02-19 23:54:56', null, '127.0.0.1', '1');
INSERT INTO `user` VALUES ('65456132132133155', '金击球', 'jisoo', '$2a$10$Nx4P9OxE6JCX8GOsjfTAIODAAUVFPLU8.lY4haB37sFfOrA025osC', null, 'https://unsplash.it/100/100?image=1053', '2021-02-03 11:24:23', null, '127.0.0.1', '1');
INSERT INTO `user` VALUES ('1354330782506385410', '朴彩英', 'rosie', '$2a$10$i.tXSs0CI8KEs9ylJClHfuKwlVSrzlsX80b99vZDIFtOFRpbg9FMK', '1626680', 'https://unsplash.it/100/100?image=1050', '2021-04-11 21:03:56', '2021-04-15 01:44:39', '127.0.0.1', '1');
INSERT INTO `user` VALUES ('1354747628447477762', 'tcefrep', 'fjl', '$2a$10$tz399DCh3Smar8mgnQbRG.RXZYQo8i3Emwirei1FOySAYOlD2NzHK', '1626680964@qq.com', 'https://unsplash.it/100/100?image=295', '2021-02-01 11:00:44', null, '127.0.0.1', '1');
INSERT INTO `user` VALUES ('1355863116267323393', 'jennie', 'jennie', '$2a$10$aQiNJUNHPxi8qTceWpcROejAK4lncrccXrTX5NoM7ckSfM3sCeDWy', '', 'https://unsplash.it/150/150?image=289', '2021-04-12 21:01:58', null, '127.0.0.1', '1');
INSERT INTO `user` VALUES ('1356025819581571074', '景阳冈上挨过打', 'test1', '$2a$10$PdxWOL1wRrRC2jeHZ54ZSeU81D5qw7IyytRrWDjgQhYFIqUDGtAvS', '', 'https://unsplash.it/100/100?image=659', '2021-02-19 21:07:34', '2021-04-15 02:33:47', '127.0.0.1', '1');

-- ----------------------------
-- Table structure for views
-- ----------------------------
DROP TABLE IF EXISTS `views`;
CREATE TABLE `views` (
  `blog_id` bigint(20) NOT NULL COMMENT '访问的博客id',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '访问的时间',
  `ip` varchar(50) NOT NULL COMMENT '访问者的ip',
  PRIMARY KEY (`blog_id`,`create_time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of views
-- ----------------------------
INSERT INTO `views` VALUES ('1354747628447477762', '2021-02-20 20:00:44', '127.0.0.1');
INSERT INTO `views` VALUES ('1354747628447477762', '2021-02-20 20:02:44', '127.0.0.1');
INSERT INTO `views` VALUES ('1354747628447477762', '2021-02-20 20:04:29', '127.0.0.1');
INSERT INTO `views` VALUES ('1354971607569526785', '2021-02-19 20:00:35', '0');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-18 23:53:16', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-19 23:00:23', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-19 23:53:02', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-19 23:53:09', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:29:18', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:30:15', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:30:37', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:31:24', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:32:23', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:32:37', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:32:43', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:40:44', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:46:27', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:47:25', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:47:35', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:48:04', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 18:49:16', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 19:37:24', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 19:37:25', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-20 19:38:15', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-02-21 11:31:28', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-03-13 14:35:21', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-03-18 14:16:41', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 21:44:39', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 21:47:02', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 21:53:41', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 21:55:36', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:06:42', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:10:23', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:12:41', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:12:53', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:15:52', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 22:16:45', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 23:28:59', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 23:37:47', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 23:48:20', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-14 23:48:59', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-15 00:07:46', '127.0.0.1');
INSERT INTO `views` VALUES ('1354977782910414850', '2021-04-15 00:08:25', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-19 23:53:35', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-19 23:53:40', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 19:47:48', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 19:49:36', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 19:50:45', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:00:26', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:00:40', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:02:35', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:04:27', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:06:50', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:07:07', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:23:50', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:24:16', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:25:25', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:29:30', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:30:07', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:30:12', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:30:16', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 20:30:49', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 21:15:39', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-02-20 21:15:49', '127.0.0.1');
INSERT INTO `views` VALUES ('1355150991559442433', '2021-04-16 11:38:04', '127.0.0.1');
INSERT INTO `views` VALUES ('1355697631751966722', '2021-02-19 23:55:05', '127.0.0.1');
INSERT INTO `views` VALUES ('1355697631751966722', '2021-02-20 21:15:58', '127.0.0.1');
INSERT INTO `views` VALUES ('1355697631751966722', '2021-02-21 11:31:39', '127.0.0.1');
INSERT INTO `views` VALUES ('1355697631751966722', '2021-02-21 23:14:01', '127.0.0.1');
INSERT INTO `views` VALUES ('1355697631751966722', '2021-02-21 23:14:17', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-20 20:26:45', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-20 20:29:19', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-20 20:29:22', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-20 21:37:28', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-21 11:31:43', '127.0.0.1');
INSERT INTO `views` VALUES ('1356075450692730882', '2021-02-21 20:49:57', '127.0.0.1');
INSERT INTO `views` VALUES ('1356077342923620353', '2021-02-21 11:31:48', '127.0.0.1');
INSERT INTO `views` VALUES ('1356077342923620353', '2021-03-13 15:28:21', '127.0.0.1');
INSERT INTO `views` VALUES ('1356079071975112705', '2021-02-12 20:38:44', '0');
INSERT INTO `views` VALUES ('1356079071975112705', '2021-02-13 20:38:40', '0');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-12 20:00:54', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-13 20:18:02', '0');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-16 11:21:18', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-17 21:42:35', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-18 21:41:18', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-02-20 22:22:56', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-06 10:21:55', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-06 10:23:32', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-06 10:25:44', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-06 10:33:41', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-09 21:18:39', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-09 21:23:35', '127.0.0.1');
INSERT INTO `views` VALUES ('1356935614018834433', '2021-05-09 23:42:13', '127.0.0.1');
INSERT INTO `views` VALUES ('1365952371696091138', '2021-02-28 17:10:26', '127.0.0.1');
INSERT INTO `views` VALUES ('1365952371696091138', '2021-04-16 11:36:49', '127.0.0.1');
INSERT INTO `views` VALUES ('1365952371696091138', '2021-05-06 09:48:45', '127.0.0.1');

-- ----------------------------
-- View structure for blog_views
-- ----------------------------
DROP VIEW IF EXISTS `blog_views`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `blog_views` AS select `v`.`blog_id` AS `blog_id`,`b`.`title` AS `title`,`v`.`create_time` AS `create_time`,`v`.`ip` AS `ip` from (`views` `v` join `blog` `b`) where (`b`.`blog_id` = `v`.`blog_id`) ;

-- ----------------------------
-- View structure for comments_statistics
-- ----------------------------
DROP VIEW IF EXISTS `comments_statistics`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `comments_statistics` AS select `cp`.`blog_id` AS `blog_id`,`b`.`title` AS `title`,`b`.`uid` AS `uid`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 6 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `seven_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 5 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `six_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 4 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `five_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 3 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `four_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 2 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `three_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') = (curdate() - interval 1 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `two_day`,ifnull((select count(0) from `comment` `c` where ((date_format(`c`.`create_time`,'%y-%m-%d') > (curdate() - interval 1 day)) and (`c`.`blog_id` = `cp`.`blog_id`))),0) AS `one_day` from (`comment` `cp` join `blog` `b`) where (`b`.`blog_id` = `cp`.`blog_id`) group by `cp`.`blog_id` ;

-- ----------------------------
-- View structure for report
-- ----------------------------
DROP VIEW IF EXISTS `report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `report` AS select sum(`c`.`seven_day`) AS `c_seven_day`,sum(`c`.`six_day`) AS `c_six_day`,sum(`c`.`five_day`) AS `c_five_day`,sum(`c`.`four_day`) AS `c_four_day`,sum(`c`.`three_day`) AS `c_three_day`,sum(`c`.`two_day`) AS `c_two_day`,sum(`c`.`one_day`) AS `c_one_day`,sum(`v`.`seven_day`) AS `v_seven_day`,sum(`v`.`six_day`) AS `v_six_day`,sum(`v`.`five_day`) AS `v_five_day`,sum(`v`.`four_day`) AS `v_four_day`,sum(`v`.`three_day`) AS `v_three_day`,sum(`v`.`two_day`) AS `v_two_day`,sum(`v`.`one_day`) AS `v_one_day` from (`comments_statistics` `c` join `views_statistics` `v`) ;

-- ----------------------------
-- View structure for thumbs_up_statistics
-- ----------------------------
DROP VIEW IF EXISTS `thumbs_up_statistics`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `thumbs_up_statistics` AS select `tp`.`blog_id` AS `blog_id`,`b`.`title` AS `title`,`b`.`uid` AS `uid`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 6 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `seven_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 5 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `six_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 4 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `five_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 3 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `four_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 2 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `three_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') = (curdate() - interval 1 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `two_day`,ifnull((select count(0) from `thumbs_up` `t` where ((date_format(`t`.`create_time`,'%y-%m-%d') > (curdate() - interval 1 day)) and (`t`.`blog_id` = `tp`.`blog_id`))),0) AS `one_day` from (`thumbs_up` `tp` join `blog` `b`) where (`b`.`blog_id` = `tp`.`blog_id`) group by `tp`.`blog_id` ;

-- ----------------------------
-- View structure for views_statistics
-- ----------------------------
DROP VIEW IF EXISTS `views_statistics`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `views_statistics` AS select `vp`.`blog_id` AS `blog_id`,`b`.`title` AS `title`,`b`.`uid` AS `uid`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 6 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `seven_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 5 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `six_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 4 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `five_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 3 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `four_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 2 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `three_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') = (curdate() - interval 1 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `two_day`,ifnull((select count(0) from `views` `v` where ((date_format(`v`.`create_time`,'%y-%m-%d') > (curdate() - interval 1 day)) and (`v`.`blog_id` = `vp`.`blog_id`))),0) AS `one_day` from (`views` `vp` join `blog` `b`) where (`b`.`blog_id` = `vp`.`blog_id`) group by `vp`.`blog_id` ;
DROP TRIGGER IF EXISTS `thumbs_up_insert`;
DELIMITER ;;
CREATE TRIGGER `thumbs_up_insert` AFTER INSERT ON `thumbs_up` FOR EACH ROW BEGIN
UPDATE blog as b SET b.thumbs =b.thumbs+1   WHERE b.blog_id= new.blog_id ;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `thumbs_up_delete`;
DELIMITER ;;
CREATE TRIGGER `thumbs_up_delete` AFTER DELETE ON `thumbs_up` FOR EACH ROW BEGIN
UPDATE blog as b SET b.thumbs = b.thumbs - 1   WHERE b.blog_id= old.blog_id  ;
END
;;
DELIMITER ;
